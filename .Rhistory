BASEDEDADOS = data.frame()
BASEDEDADOS
for(fotos in 1:20){
local = dados$registros$itens[[fotos]]$local
autor = dados$registros$itens[[fotos]]$autor
data = dados$registros$itens[[fotos]]$data
id = dados$registros$itens[[fotos]]$id
registro = data.frame(id,autor,data,local)
BASEDEDADOS = rbind(BASEDEDADOS,registro)
}
BASEDEDADOS
dados
dim(dados)
length(dados)
dados$registros
length(dados$registros)
length(dados$registros$itens)
a = 0
a
0 == 0
0 == 1
'abc' == 'abc'
length(dados$registros$itens) == 0
if(0 == 0){
cat('bunda')
}
cat('cu')
if(0 == 0){
cat('bunda')
} else{
cat('cu')
}
if(0 == 1){
cat('bunda')
} else{
cat('cu')
}
if(length(dados$registros$itens) == 0){
break
} else{
a = 0
}
a
if(0 == 0){
break
} else{
a = 0
}
for(i in 1:10){
i
}
for(i in 1:10){
cat(i)
}
i
i = 1
while(i < 10){
i = i + 1
cat('bunda\n')
}
while(i < 10){
i = 1
cat('bunda\n')
}
while(i < 10){
i = 1
cat('bunda\n')
}
i = 1
while(i < 10){
i = 1
cat('bunda\n')
}
i = 1
while(i < 10){
i = i + 5
cat('bunda\n')
}
ITENS = 1
ITENS = 1
while(ITENS > 0){
for(pagina in 1:1000){
url = paste0("https://www.wikiaves.com.br/getRegistrosJSON.php?tm=f&t=s&s=10564&o=mp&o=mp&p=",pagina)
html = GET(url = url)
dados - fromJSON(content(html, "text"))
ITENS = length(dados$registros$itens)
for(fotos in 1:20){
local = dados$registros$itens[[fotos]]$local
autor = dados$registros$itens[[fotos]]$autor
data = dados$registros$itens[[fotos]]$data
id = dados$registros$itens[[fotos]]$id
registro = data.frame(id,autor,data,local)
BASEDEDADOS = rbind(BASEDEDADOS,registro)
}
}
}
BASEDEDADOS
dados - fromJSON(content(html, "text"))
HTML
html
dados - fromJSON(content(html, "text"))
pagina
url = paste0("https://www.wikiaves.com.br/getRegistrosJSON.php?tm=f&t=s&s=10564&o=mp&o=mp&p=",pagina)
html = GET(url = url)
html
dados - fromJSON(content(html, "text"))
url
dados - fromJSON(content(html, "text"))
url = paste0("https://www.wikiaves.com.br/getRegistrosJSON.php?tm=f&t=s&s=10564&o=mp&o=mp&p=",pagina)
html = GET(url = url)
dados - fromJSON(content(html, "text"))
BASEDEDADOS = data.frame()
ITENS = 1
while(ITENS > 0){
for(pagina in 1:1000){
url = paste0("https://www.wikiaves.com.br/getRegistrosJSON.php?tm=f&t=s&s=10564&o=mp&o=mp&p=",pagina)
html = GET(url = url)
dados = fromJSON(content(html, "text"))
ITENS = length(dados$registros$itens)
for(fotos in 1:20){
local = dados$registros$itens[[fotos]]$local
autor = dados$registros$itens[[fotos]]$autor
data = dados$registros$itens[[fotos]]$data
id = dados$registros$itens[[fotos]]$id
registro = data.frame(id,autor,data,local)
BASEDEDADOS = rbind(BASEDEDADOS,registro)
}
}
}
BASEDEDADOS
pagina
url = paste0("https://www.wikiaves.com.br/getRegistrosJSON.php?tm=f&t=s&s=10564&o=mp&o=mp&p=",pagina)
html = GET(url = url)
dados = fromJSON(content(html, "text"))
ITENS = length(dados$registros$itens)
ITENS
1:ITENS
BASEDEDADOS = data.frame()
BASEDEDADOS = data.frame()
ITENS = 1
while(ITENS > 0){
for(pagina in 1:1000){
pagina
url = paste0("https://www.wikiaves.com.br/getRegistrosJSON.php?tm=f&t=s&s=10564&o=mp&o=mp&p=",pagina)
html = GET(url = url)
dados = fromJSON(content(html, "text"))
ITENS = length(dados$registros$itens)
for(fotos in 1:ITENS){
local = dados$registros$itens[[fotos]]$local
autor = dados$registros$itens[[fotos]]$autor
data = dados$registros$itens[[fotos]]$data
id = dados$registros$itens[[fotos]]$id
registro = data.frame(id,autor,data,local)
BASEDEDADOS = rbind(BASEDEDADOS,registro)
}
}
}
BASEDEDADOS
ITENS
BASEDEDADOS = data.frame()
BASEDEDADOS = data.frame()
ITENS = 1
for(pagina in 1:1000){
pagina
url = paste0("https://www.wikiaves.com.br/getRegistrosJSON.php?tm=f&t=s&s=10564&o=mp&o=mp&p=",pagina)
html = GET(url = url)
dados = fromJSON(content(html, "text"))
ITENS = length(dados$registros$itens)
while(ITENS > 0){
for(fotos in 1:ITENS){
local = dados$registros$itens[[fotos]]$local
autor = dados$registros$itens[[fotos]]$autor
data = dados$registros$itens[[fotos]]$data
id = dados$registros$itens[[fotos]]$id
registro = data.frame(id,autor,data,local)
BASEDEDADOS = rbind(BASEDEDADOS,registro)
}
}
}
BASEDEDADOS = data.frame()
for(pagina in 1:1000){
pagina
url = paste0("https://www.wikiaves.com.br/getRegistrosJSON.php?tm=f&t=s&s=10564&o=mp&o=mp&p=",pagina)
html = GET(url = url)
dados = fromJSON(content(html, "text"))
ITENS = length(dados$registros$itens)
if(ITENS == 0){
pagina = 1000
}
for(fotos in 1:ITENS){
local = dados$registros$itens[[fotos]]$local
autor = dados$registros$itens[[fotos]]$autor
data = dados$registros$itens[[fotos]]$data
id = dados$registros$itens[[fotos]]$id
registro = data.frame(id,autor,data,local)
BASEDEDADOS = rbind(BASEDEDADOS,registro)
}
}
BASEDEDADOS = data.frame()
for(pagina in 1:100){
pagina
url = paste0("https://www.wikiaves.com.br/getRegistrosJSON.php?tm=f&t=s&s=10564&o=mp&o=mp&p=",pagina)
html = GET(url = url)
dados = fromJSON(content(html, "text"))
ITENS = length(dados$registros$itens)
for(fotos in 1:ITENS){
local = dados$registros$itens[[fotos]]$local
autor = dados$registros$itens[[fotos]]$autor
data = dados$registros$itens[[fotos]]$data
id = dados$registros$itens[[fotos]]$id
registro = data.frame(id,autor,data,local)
BASEDEDADOS = rbind(BASEDEDADOS,registro)
}
}
ITENS
BASEDEDADOS
nrow(BASEDEDADOS)
BASEDEDADOS$autor
BASEDEDADOS = data.frame()
for(pagina in 1:17){
pagina
url = paste0("https://www.wikiaves.com.br/getRegistrosJSON.php?tm=f&t=s&s=10564&o=mp&o=mp&p=",pagina)
html = GET(url = url)
dados = fromJSON(content(html, "text"))
ITENS = length(dados$registros$itens)
ITENS
for(fotos in 1:ITENS){
local = dados$registros$itens[[fotos]]$local
autor = dados$registros$itens[[fotos]]$autor
data = dados$registros$itens[[fotos]]$data
id = dados$registros$itens[[fotos]]$id
registro = data.frame(id,autor,data,local)
BASEDEDADOS = rbind(BASEDEDADOS,registro)
}
}
BASEDEDADOS
BASEDEDADOS$data
as.Date(BASEDEDADOS$data)
BASEDEDADOS$data
as.Date(BASEDEDADOS$data, format = "%d/%m/%Y")
BASEDEDADOS$data = as.Date(BASEDEDADOS$data, format = "%d/%m/%Y")
BASEDEDADOS |> arrange(data)
BASEDADOS = BASEDEDADOS |> arrange(data)
BASEDADOS |> group_by(autor) |> summarise(n())
BASEDADOS |> group_by(autor) |> summarise(qtd = n()) |> arrange(-qtd)
BASEDADOS |> group_by(autor) |> summarise(primeira_visita = min(data))
BASEDADOS |> merge(BASEDADOS |> group_by(autor) |> summarise(primeira_visita = min(data)),by = 'autor')
BASEDADOS |>
merge(BASEDADOS |>
group_by(autor) |>
summarise(primeira_visita = min(data)),by = 'autor') |>
filter(data == primeira_visita)
BASEDADOS = BASEDADOS |>
merge(BASEDADOS |>
group_by(autor) |>
summarise(primeira_visita = min(data)),by = 'autor') |>
filter(data == primeira_visita)
BASEDADOS |> filter(autor == 'Diego B.S Gomes')
#install.packages("httr")  #instalando pacote que lê dados da web
#install.packages("rvest")  #instalando pacote que lê dados da web
#install.packages("dplyr")  #manipula qualquer tipo de dados
#install.packages("jsonlite")  #manipula o formato de dados json, que é o mesmo que formato excel, texto
require(rvest) #chamando o pacote para ser utilizado
require(httr)
require(dplyr)
require(jsonlite)
BASEDEDADOS = data.frame()
for(pagina in 1:17){
pagina
url = paste0("https://www.wikiaves.com.br/getRegistrosJSON.php?tm=f&t=s&s=10564&o=mp&o=mp&p=",pagina)
html = GET(url = url)
dados = fromJSON(content(html, "text"))
ITENS = length(dados$registros$itens)
ITENS
for(fotos in 1:ITENS){
local = dados$registros$itens[[fotos]]$local
autor = dados$registros$itens[[fotos]]$autor
data = dados$registros$itens[[fotos]]$data
id = dados$registros$itens[[fotos]]$id
registro = data.frame(id,autor,data,local)
BASEDEDADOS = rbind(BASEDEDADOS,registro)
}
}
BASEDEDADOS$data = as.Date(BASEDEDADOS$data, format = "%d/%m/%Y")
BASEDADOS = BASEDEDADOS |> arrange(data)
BASEDEDADOS = BASEDEDADOS |>
merge(BASEDEDADOS |>
group_by(autor) |>
summarise(primeira_visita = min(data)),by = 'autor') |>
filter(data == primeira_visita)
BASEDADOS
#install.packages("httr")  #instalando pacote que lê dados da web
#install.packages("rvest")  #instalando pacote que lê dados da web
#install.packages("dplyr")  #manipula qualquer tipo de dados
#install.packages("jsonlite")  #manipula o formato de dados json, que é o mesmo que formato excel, texto
require(rvest) #chamando o pacote para ser utilizado
require(httr)
require(dplyr)
require(jsonlite)
BASEDEDADOS = data.frame()
for(pagina in 1:17){
pagina
url = paste0("https://www.wikiaves.com.br/getRegistrosJSON.php?tm=f&t=s&s=10564&o=mp&o=mp&p=",pagina)
html = GET(url = url)
dados = fromJSON(content(html, "text"))
ITENS = length(dados$registros$itens)
ITENS
for(fotos in 1:ITENS){
local = dados$registros$itens[[fotos]]$local
autor = dados$registros$itens[[fotos]]$autor
data = dados$registros$itens[[fotos]]$data
id = dados$registros$itens[[fotos]]$id
registro = data.frame(id,autor,data,local)
BASEDEDADOS = rbind(BASEDEDADOS,registro)
}
}
BASEDEDADOS$data = as.Date(BASEDEDADOS$data, format = "%d/%m/%Y")
BASEDEDADOS = BASEDEDADOS |> arrange(data)
BASEDEDADOS = BASEDEDADOS |>
merge(BASEDEDADOS |>
group_by(autor) |>
summarise(primeira_visita = min(data)),by = 'autor') |>
filter(data == primeira_visita)
BASEDADOS
BASEDEDADOS
duplicated(BASEDADOS$autor)
!duplicated(BASEDADOS$autor)
BASEDEDADOS |> filter(!duplicated(BASEDADOS$autor))
BASEDEDADOS |> filter(!duplicated(BASEDADOS$autor))
BASEDEDADOS |> filter(!duplicated(BASEDEDADOS$autor))
BASEDEDADOS = BASEDEDADOS |> filter(!duplicated(BASEDEDADOS$autor))
BASEDEDADOS = BASEDEDADOS |> arrange(data)
BASEDADOS
BASEDEDADOSDADOS
write.table(BASEDEDADOS, file = paste0("VISITASBACURAU.csv"), sep = ";", na = "null", quote = TRUE, row.names = FALSE,fileEncoding = "latin1",dec = ".")
#| echo: false
#| warnings: false
#| message: false
require(caret)
require(dplyr)
require(stringr)
require(data.table)
require(tidyr)
#| echo: false
#| warnings: false
#| message: false
getwd()
setwd("C:/Users/pedro/Desktop/CONSULTORIA/PRODUTOS/INVESTIMENTOS")
dados = read.csv('DADOS_TREINAMENTO_INTERNACIONAL.csv',header = T,sep = ';',encoding = 'latin1',dec = '.',na.strings = c('null','NA'))
dados$ID = row.names(dados)
#str(dados)
#| echo: false
#| warnings: false
#| message: false
#data.table(dados[,])
#colnames(dados)
#dados$int_avg_tx_dif_1_Automóveis
dados = dados |>
mutate(across(starts_with("int"), ~replace_na(., 0)))
sel_manual = unique(c(which(colnames(dados) %in% c("EMPRESA","Nome.da.Empresa.","ano","Open","SETOR","SUBSETOR","SEGMENTO","Idade_Segmento_Setor","ROI_ADJ","ROI_ADJ_2","MARGEM.LÍQUIDA.value","DIVIDEND.YIELD..DY..value","P.L.value","VPA.value","LPA.value","STATUS_GRAHAM","DIF_GRAHAM","PERATVNAOCOR","Y","Y3","metric_SEGMENTO_MARGEM.LÍQUIDA.value_Q50","DIVIDEND.YIELD..DY..value_RANKSCORE","classe_cap_v2","DÍVIDA.BRUTA...PATRIMÔNIO.value","ID"))))
sel_manual = unique(c(which(colnames(dados) %in% c("EMPRESA","Nome.da.Empresa.","ano","Open","SETOR","SUBSETOR","SEGMENTO","ROI_ADJ","MARGEM.LÍQUIDA.value","P.L.value","STATUS_GRAHAM","DIF_GRAHAM","Y3","metric_SEGMENTO_MARGEM.LÍQUIDA.value_Q50","DÍVIDA.BRUTA...PATRIMÔNIO.value","ID")),which(str_detect(colnames(dados),'int_avg_tx_dif_1'))))
var_prev = which(str_detect(colnames(dados),'^Y3$'))
sel = dados[ ,unique(c(var_prev,sel_manual))]
del_chr = sapply(sel, class) != 'character'
sel = sel[,del_chr]
nas <- colSums(is.na(sel))
colnames(sel)[which(nas / nrow(sel) > 0.5)]
#sel = sel[,-which(nas/nrow(sel) > 0.45)]
sel = sel[complete.cases(sel),]
index = createDataPartition(y = sel$Y3, times = 1, p = 0.7, list = FALSE)
treino = sel[index,]
teste = sel[-index,]
trainControl = trainControl(method = 'repeatedcv',number = 2, repeats=2)
#fit.RF = train(Y3~.,treino[,],trControl = trainControl, method = 'lm',preProc = c('center','scale'))
#fit.RF$finalModel
#dados$prev = predict(fit.RF,dados,type = 'raw',na.action = NULL)
'COMO SABER SE MEU MODELO É BOM?, VÁRIAS FORMAS'
#dados |> filter(EMPRESA == 'aapl') |> select(EMPRESA,ano,prev,Y3) |> arrange(-ano)
#| echo: false
#| warnings: false
#| message: false
dados$Y_REG = dados$Y3
dados$Y_CLA = as.factor(ifelse(dados$Y3 > (15*3),'1','0'))
dados$Y_CLA_X2 = as.factor(ifelse(dados$Y3 > (20*3),'1','0'))
var_prev = which(str_detect(colnames(dados),'Y_'))
"Organizando Variáveis"
{
c1 = str_detect(dados$classe_cap,'Large|Mid')
c2 = (dados$ano >= 2008 & dados$ano < 2022)
sel = dados[c2 ==T ,unique(c(var_prev,sel_manual))]
sel =sel[!is.na(sel$Y_REG),]
nas <- colSums(is.na(sel))
#colnames(sel)[which(nas / nrow(sel) > 0.45)]
#sel = sel[,-which(nas/nrow(sel) > 0.45)]
sel = sel |> mutate_all(~ replace(., is.infinite(.) | is.nan(.), NA))
sum(complete.cases(sel))
sel = sel[complete.cases(sel),]
index = (sel$ano) >= 2019
treino = sel[!(index),]
teste = sel[(index),]
trainControl = trainControl(method = 'repeatedcv',number = 3, repeats=5)
sel_var = colnames(treino)
}
#| echo: false
#| warnings: false
#| message: false
key = 'n'
#| echo: false
#| warnings: false
#| message: false
if(key == 'y'){
{
x = treino[,c(sel_var)]
y = treino$Y_REG
del_chr = which(sapply(x, class) == 'character')
del = which(str_detect(colnames(x), '^Y|^ano$|Open'))
x = x[,-c(del_chr,del)]
colnames(x)
}
{
subsets = c(1:ncol(x))
ctrl <- rfeControl(functions = lmFuncs,method = "repeatedcv",repeats = 3,number = 5,verbose = FALSE)
lmProfile <- rfe(x, y,sizes = subsets,rfeControl = ctrl)
lmProfile$optVariables
lmProfile$fit
lmProfile$variables %>%
group_by(var) %>%
summarise(calc = mean(Overall, na.rm = TRUE)) %>%
arrange(desc(calc))
saveRDS(lmProfile,paste0('featsel_lmFuncs_yreg.rds'))
}
}
#| echo: false
#| warnings: false
#| message: false
if(key == 'y'){
{
x = treino[,c(sel_var)]
y = treino$Y_CLA
del_chr = which(sapply(x, class) == 'character')
del = which(str_detect(colnames(x), '^Y|^ano$|Open'))
x = x[,-c(del_chr,del)]
#vars = sample(colnames(x),2); x = x[,vars]
}
{
subsets = c(1:ncol(x))
ctrl <- rfeControl(functions = rfFuncs,method = "repeatedcv",repeats = 3,number = 5,verbose = FALSE)
#lmProfile <- rfe(x, y,sizes = subsets,rfeControl = ctrl)
#lmProfile
#saveRDS(lmProfile,paste0('featsel_rfFuncs_ycla.rds'))
}
}
#zero_var <- nearZeroVar(dados[, ], saveMetrics = TRUE)
#vars_to_remove <- rownames(zero_var[zero_var$zeroVar, ])
#vars_selected <- setdiff(vars_selected, vars_to_remove)
treino = merge(treino,dados,by = 'ID',all.x = T, suffixes = c("", ".dupl"))
teste = merge(teste,dados,by = 'ID',all.x = T,suffixes = c("", ".dupl"))
treino = treino[,!str_detect(colnames(treino),'.dupl')]
teste = teste[,!str_detect(colnames(teste),'.dupl')]
lmProfile <- readRDS('featsel_lmFuncs_yreg.rds')
vars <- lmProfile$variables %>%
group_by(var) %>%
summarise(calc = mean(Overall, na.rm = TRUE)) %>%
arrange(desc(calc)) %>%
pull(var)
avl <- lmProfile$results$Rsquared
n_vrs <- which(abs(avl - max(avl)) < 0.385)[1]
vars_SEL <- c('Y_REG', vars[1:ifelse(n_vrs == 1, n_vrs + 1, n_vrs)])
vars_SEL
models_reg <- c('glmnet', 'gbm', 'lasso', 'ridge', 'knn')
trainControl <- trainControl(method = 'repeatedcv', number = 5, repeats = 3)
TREINO = treino
TREINO = TREINO[sample(1:nrow(TREINO),50,F),]
train_model_reg_rfe_generic <- function(model_name, data, vars_selected) {
set.seed(10)
# Controle de treinamento com validação cruzada
ctrl <- rfeControl(functions = NULL, method = 'repeatedcv', number = 5, repeats = 3)
vars_selected = setdiff(vars_selected,'Y_REG')
# Treinamento com RFE (funciona de forma genérica com qualquer modelo)
rfe_model <- rfe(data[, vars_selected], data$Y_REG, sizes = c(3:length(vars_selected)),
rfeControl = ctrl, method = model_name)
rfe_filename <- paste0(model_name, "_rfe_", "model.rds")
saveRDS(rfe_model, file = rfe_filename)
# Mostra as variáveis selecionadas
selected_vars <- rfe_model$optVariables
print(paste("Melhores variáveis:", paste(selected_vars, collapse=", ")))
# Treinamento final com as variáveis selecionadas
final_model <- train(Y_REG ~ ., data = data[, c(selected_vars, "Y_REG")],
method = model_name, trControl = trainControl(method = 'repeatedcv', number = 5, repeats = 3),
preProc = c('center', 'scale'))
return(final_model)
}
modellist <- lapply(models_reg[1], function(model) train_model_reg_rfe_generic(model, TREINO, vars_SEL))
RFE = readRDS('glmnet_rfe__model.rds')
RFE$variables %>%
group_by(var) %>%
summarise(calc = mean(Overall, na.rm = TRUE)) %>%
arrange(desc(calc))
varImp(modellist[[1]])
varImp(modellist[[1]])
data.frame(a = c(1,2), b = c('a','b'))
require(DT)
datatable(data.frame(a = c(1,2), b = c('a','b')))
datatable(data.frame(a = c(1, 2), b = c('a', 'b')),
options = list(
dom = 't',
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});",
"$(this.api().table().body()).css({'background-color': '#000', 'color': '#fff'});",
"}"))
)
