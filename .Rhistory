"table.on('draw.dt', function() {",
"$('table.dataTable').css({'background-color': 'black', 'color': 'white'});",
"$('table.dataTable thead th').css({'background-color': '#333', 'color': 'white'});",
"$('table.dataTable tfoot th').css({'background-color': '#333', 'color': 'white'});",
"$('table.dataTable tbody tr').css({'background-color': 'black', 'color': 'white'});",
"$('table.dataTable tbody tr:hover').css({'background-color': '#444', 'color': 'white'});",
"});"
)
)
#| fig-align: center
#| echo: true
#| warning: false
#| message: false
dados = read.csv(file = 'dataset_olympics.csv',header = T) # Carrega os dados do arquivo CSV
noc = read.csv(file = 'noc_region.csv',header = T) # Carrega os dados do arquivo CSV
#str(dados) # Mostra a estrutura dos dados
# Exibe as primeiras 10 linhas dos dados como uma tabela dinâmica com estilo personalizado
datatable(
dados[,],
options = list(
pageLength = 10,
autoWidth = TRUE,
columnDefs = list(
list(targets = '_all', className = 'dt-center'),  # Centraliza os dados
list(targets = '_all', render = JS(
"function(data, type, row, meta) {",
"return '<span style=\"font-size:12px;\">' + data + '</span>';",
"}"))
),
scrollX = TRUE  # Adiciona barra de rolagem horizontal se necessário
),
rownames = FALSE,
class = 'cell-border stripe',
style = "bootstrap",
callback = JS(
"table.on('draw.dt', function() {",
"$('table.dataTable').css({'background-color': 'black', 'color': 'white'});",
"$('table.dataTable thead th').css({'background-color': '#333', 'color': 'white'});",
"$('table.dataTable tfoot th').css({'background-color': '#333', 'color': 'white'});",
"$('table.dataTable tbody tr').css({'background-color': 'black', 'color': 'white'});",
"$('table.dataTable tbody tr:hover').css({'background-color': '#444', 'color': 'white'});",
"});"
)
)
#| fig-align: center
#| echo: true
#| warning: false
#| message: false
visual = sel |>
filter(reg != 'NA') |>
filter(rank_mdl_tot <= 3) |> # Filtra os top 3 no ranking de total de medalhas
arrange(Sport,rank_mdl_tot) |> # Ordena por Sport e ranking de total de medalhas
select(NOC,Sport,rank_mdl_tot,reg,mdl_tot) |> # Seleciona as colunas relevantes
mutate(
color = case_when(
rank_mdl_tot <= 1.5 ~ "gold", # Cor para o 1º lugar
rank_mdl_tot <= 2.5 ~ "#C0C0C0", # Cor para o 2º lugar
rank_mdl_tot <= 3.5 ~ "#CD7F32", # Cor para o 3º lugar
TRUE ~ "#E0E0E0" # Cor para os demais
)
)
#length(unique(visual$Sport)) # Conta os valores únicos da coluna Sport
visual$reg <- tidytext::reorder_within(visual$reg, visual$mdl_tot, visual$Sport) # Reordena dentro de cada esporte
sports = visual |> group_by(Sport) |> summarise(s = sum(mdl_tot)) |> arrange(-s) |> select(Sport) |> pull()
visual1 = visual[visual$Sport %in% sports[1:9],] # Filtra os primeiros 18 esportes
visual2 = visual[visual$Sport %in% sports[10:18],] # Filtra os próximos 18 esportes
visual3 = visual[visual$Sport %in% sports[19:27],] # Filtra os últimos esportes
visual4 = visual[visual$Sport %in% sports[28:36],] # Filtra os últimos esportes
visual5 = visual[visual$Sport %in% sports[37:45],] # Filtra os últimos esportes
visual6 = visual[visual$Sport %in% sports[46:54],] # Filtra os últimos esportes
library(tidytext) # Carrega o pacote tidytext
ggplot(visual1, aes(x = reorder(reg,mdl_tot), y = mdl_tot)) + # Cria gráfico de barras ordenado pelo total de medalhas
geom_bar(stat = "identity", aes(fill = color)) + # Define o tipo de gráfico e as cores
geom_text(aes(label = round(mdl_tot)), vjust = 0.5, hjust = 1, size = 4, fontface = "bold") + # Adiciona texto às barras
coord_flip() + # Inverte os eixos
theme_minimal() + # Aplica tema minimalista
theme(
axis.title.x = element_blank(), # Remove título do eixo x
axis.title.y = element_blank(), # Remove título do eixo y
axis.text.x = element_blank(), # Remove texto do eixo x
axis.ticks.x = element_blank(), # Remove ticks do eixo x
axis.text.y = element_text(size = 10, face = "bold"),  # Ajusta texto do eixo y
panel.grid = element_blank(), # Remove grid
plot.title = element_text(size = 12, face = "bold", hjust = 0.5),# Ajusta título
strip.text = element_text(size = 8, face = "bold", color = "black")  # Ajusta título do facet
) +
labs(title = "") + # Define título
scale_fill_identity()+ # Aplica as cores definidas manualmente
tidytext::scale_x_reordered() +  # Ajusta etiquetas do eixo x
facet_wrap(~Sport, scales = "free_y") # Facet wrap por esporte com escalas livres no eixo y
#| fig-align: center
#| echo: true
#| warning: false
#| message: false
visual = sel |>
filter(reg != 'NA') |>
filter(rank_mdl_tot <= 3) |> # Filtra os top 3 no ranking de total de medalhas
arrange(Sport,rank_mdl_tot) |> # Ordena por Sport e ranking de total de medalhas
select(NOC,Sport,rank_mdl_tot,reg,mdl_tot) |> # Seleciona as colunas relevantes
mutate(
color = case_when(
rank_mdl_tot <= 1.5 ~ "gold", # Cor para o 1º lugar
rank_mdl_tot <= 2.5 ~ "#C0C0C0", # Cor para o 2º lugar
rank_mdl_tot <= 3.5 ~ "#CD7F32", # Cor para o 3º lugar
TRUE ~ "#E0E0E0" # Cor para os demais
)
)
#length(unique(visual$Sport)) # Conta os valores únicos da coluna Sport
visual$reg <- tidytext::reorder_within(visual$reg, visual$mdl_tot, visual$Sport) # Reordena dentro de cada esporte
sports = visual |> group_by(Sport) |> summarise(s = sum(mdl_tot)) |> arrange(-s) |> select(Sport) |> pull()
visual1 = visual[visual$Sport %in% sports[1:9],] # Filtra os primeiros 18 esportes
visual2 = visual[visual$Sport %in% sports[10:18],] # Filtra os próximos 18 esportes
visual3 = visual[visual$Sport %in% sports[19:27],] # Filtra os últimos esportes
visual4 = visual[visual$Sport %in% sports[28:36],] # Filtra os últimos esportes
visual5 = visual[visual$Sport %in% sports[37:45],] # Filtra os últimos esportes
visual6 = visual[visual$Sport %in% sports[46:54],] # Filtra os últimos esportes
library(tidytext) # Carrega o pacote tidytext
ggplot(visual1, aes(x = reorder(reg,mdl_tot), y = mdl_tot)) + # Cria gráfico de barras ordenado pelo total de medalhas
geom_bar(stat = "identity", aes(fill = color)) + # Define o tipo de gráfico e as cores
geom_text(aes(label = round(mdl_tot)), vjust = 0.5, hjust = 1, size = 4, fontface = "bold") + # Adiciona texto às barras
coord_flip() + # Inverte os eixos
theme_minimal() + # Aplica tema minimalista
theme(
axis.title.x = element_blank(), # Remove título do eixo x
axis.title.y = element_blank(), # Remove título do eixo y
axis.text.x = element_blank(), # Remove texto do eixo x
axis.ticks.x = element_blank(), # Remove ticks do eixo x
axis.text.y = element_text(size = 10, face = "bold"),  # Ajusta texto do eixo y
panel.grid = element_blank(), # Remove grid
plot.title = element_text(size = 0, face = "bold", hjust = 0.5),# Ajusta título
strip.text = element_text(size = 9, face = "bold", color = "black")  # Ajusta título do facet
) +
labs(title = "") + # Define título
scale_fill_identity()+ # Aplica as cores definidas manualmente
tidytext::scale_x_reordered() +  # Ajusta etiquetas do eixo x
facet_wrap(~Sport, scales = "free_y") # Facet wrap por esporte com escalas livres no eixo y
#| fig-align: center
#| echo: true
#| warning: false
#| message: false
visual = sel |>
filter(reg != 'NA') |>
filter(rank_mdl_tot <= 3) |> # Filtra os top 3 no ranking de total de medalhas
arrange(Sport,rank_mdl_tot) |> # Ordena por Sport e ranking de total de medalhas
select(NOC,Sport,rank_mdl_tot,reg,mdl_tot) |> # Seleciona as colunas relevantes
mutate(
color = case_when(
rank_mdl_tot <= 1.5 ~ "gold", # Cor para o 1º lugar
rank_mdl_tot <= 2.5 ~ "#C0C0C0", # Cor para o 2º lugar
rank_mdl_tot <= 3.5 ~ "#CD7F32", # Cor para o 3º lugar
TRUE ~ "#E0E0E0" # Cor para os demais
)
)
#length(unique(visual$Sport)) # Conta os valores únicos da coluna Sport
visual$reg <- tidytext::reorder_within(visual$reg, visual$mdl_tot, visual$Sport) # Reordena dentro de cada esporte
sports = visual |> group_by(Sport) |> summarise(s = sum(mdl_tot)) |> arrange(-s) |> select(Sport) |> pull()
visual1 = visual[visual$Sport %in% sports[1:9],] # Filtra os primeiros 18 esportes
visual2 = visual[visual$Sport %in% sports[10:18],] # Filtra os próximos 18 esportes
visual3 = visual[visual$Sport %in% sports[19:27],] # Filtra os últimos esportes
visual4 = visual[visual$Sport %in% sports[28:36],] # Filtra os últimos esportes
visual5 = visual[visual$Sport %in% sports[37:45],] # Filtra os últimos esportes
visual6 = visual[visual$Sport %in% sports[46:54],] # Filtra os últimos esportes
library(tidytext) # Carrega o pacote tidytext
ggplot(visual1, aes(x = reorder(reg,mdl_tot), y = mdl_tot)) + # Cria gráfico de barras ordenado pelo total de medalhas
geom_bar(stat = "identity", aes(fill = color)) + # Define o tipo de gráfico e as cores
geom_text(aes(label = round(mdl_tot)), vjust = 0.5, hjust = 1, size = 4, fontface = "bold") + # Adiciona texto às barras
coord_flip() + # Inverte os eixos
theme_minimal() + # Aplica tema minimalista
theme(
axis.title.x = element_blank(), # Remove título do eixo x
axis.title.y = element_blank(), # Remove título do eixo y
axis.text.x = element_blank(), # Remove texto do eixo x
axis.ticks.x = element_blank(), # Remove ticks do eixo x
axis.text.y = element_text(size = 10, face = "bold"),  # Ajusta texto do eixo y
panel.grid = element_blank(), # Remove grid
plot.title = element_text(size = 0, face = "bold", hjust = 0.5),# Ajusta título
strip.text = element_text(size = 8, face = "bold", color = "black")  # Ajusta título do facet
) +
labs(title = "") + # Define título
scale_fill_identity()+ # Aplica as cores definidas manualmente
tidytext::scale_x_reordered() +  # Ajusta etiquetas do eixo x
facet_wrap(~Sport, scales = "free_y") # Facet wrap por esporte com escalas livres no eixo y
#| fig-align: center
#| echo: true
#| warning: false
#| message: false
visual = sel |>
filter(reg != 'NA') |>
filter(rank_mdl_tot <= 3) |> # Filtra os top 3 no ranking de total de medalhas
arrange(Sport,rank_mdl_tot) |> # Ordena por Sport e ranking de total de medalhas
select(NOC,Sport,rank_mdl_tot,reg,mdl_tot) |> # Seleciona as colunas relevantes
mutate(
color = case_when(
rank_mdl_tot <= 1.5 ~ "gold", # Cor para o 1º lugar
rank_mdl_tot <= 2.5 ~ "#C0C0C0", # Cor para o 2º lugar
rank_mdl_tot <= 3.5 ~ "#CD7F32", # Cor para o 3º lugar
TRUE ~ "#E0E0E0" # Cor para os demais
)
)
#length(unique(visual$Sport)) # Conta os valores únicos da coluna Sport
visual$reg <- tidytext::reorder_within(visual$reg, visual$mdl_tot, visual$Sport) # Reordena dentro de cada esporte
sports = visual |> group_by(Sport) |> summarise(s = sum(mdl_tot)) |> arrange(-s) |> select(Sport) |> pull()
visual1 = visual[visual$Sport %in% sports[1:9],] # Filtra os primeiros 18 esportes
visual2 = visual[visual$Sport %in% sports[10:18],] # Filtra os próximos 18 esportes
visual3 = visual[visual$Sport %in% sports[19:27],] # Filtra os últimos esportes
visual4 = visual[visual$Sport %in% sports[28:36],] # Filtra os últimos esportes
visual5 = visual[visual$Sport %in% sports[37:45],] # Filtra os últimos esportes
visual6 = visual[visual$Sport %in% sports[46:54],] # Filtra os últimos esportes
library(tidytext) # Carrega o pacote tidytext
ggplot(visual1, aes(x = reorder(reg,mdl_tot), y = mdl_tot)) + # Cria gráfico de barras ordenado pelo total de medalhas
geom_bar(stat = "identity", aes(fill = color)) + # Define o tipo de gráfico e as cores
geom_text(aes(label = round(mdl_tot)), vjust = 0.5, hjust = 1, size = 4, fontface = "bold") + # Adiciona texto às barras
coord_flip() + # Inverte os eixos
theme_minimal() + # Aplica tema minimalista
theme(
axis.title.x = element_blank(), # Remove título do eixo x
axis.title.y = element_blank(), # Remove título do eixo y
axis.text.x = element_blank(), # Remove texto do eixo x
axis.ticks.x = element_blank(), # Remove ticks do eixo x
axis.text.y = element_text(size = 10, face = "bold"),  # Ajusta texto do eixo y
panel.grid = element_blank(), # Remove grid
plot.title = element_text(size = 0, face = "bold", hjust = 0.5),# Ajusta título
strip.text = element_text(size = 8.5, face = "bold", color = "black")  # Ajusta título do facet
) +
labs(title = "") + # Define título
scale_fill_identity()+ # Aplica as cores definidas manualmente
tidytext::scale_x_reordered() +  # Ajusta etiquetas do eixo x
facet_wrap(~Sport, scales = "free_y") # Facet wrap por esporte com escalas livres no eixo y
#| fig-align: center
#| echo: true
#| warning: false
#| message: false
dados$Medal = ifelse(dados$Medal == '','Null',dados$Medal) # Substitui valores vazios em Medal por 'Null'
dados$aux = 1 # Cria uma coluna auxiliar com valor 1
dados = dados |>
pivot_wider(names_from = c(Medal),values_from = aux,values_fn = sum,values_fill = 0) |> # Transforma os dados em formato wide
as.data.frame() # Converte para data frame
wordcloud::wordcloud(unique(dados$Sport))
#unique(dados$Sport) # Mostra os valores únicos da coluna Sport
table(unique(dados$Sport))
as.data.frame(table(unique(dados$Sport)))
wc = as.data.frame(table(unique(dados$Sport)))
wordcloud::wordcloud(wc$Var1,freq = wc$Freq)
wordcloud::wordcloud(wc$Var1,freq = wc$Freq,scale = 0.5)
wordcloud::wordcloud(wc$Var1,freq = wc$Freq,scale = 1)
wordcloud::wordcloud(wc$Var1,freq = wc$Freq,scale = 2)
wordcloud2::::wordcloud2(wc$Var1,freq = wc$Freq,scale = 2)
wordcloud2::wordcloud2(wc$Var1,freq = wc$Freq,scale = 2)
wordcloud2::wordcloud2(wc$Var1)
wordcloud2::wordcloud2(wc$Var1,wc$Freq)
wordcloud2::wordcloud2(wc$Var1,wc$Freq)
wc
wordcloud2::wordcloud2(data = wc)
wordcloud2::wordcloud2(data = wc,size = 0.5)
wordcloud2::wordcloud2(data = wc,size = 0.1)
wordcloud2::wordcloud2(data = wc,size = 0.2)
wordcloud2::wordcloud2(data = wc,size = 0.2,shape = 'A')
wordcloud2::wordcloud2(data = wc,size = 0.2,shape = '.')
wordcloud2::wordcloud2(data = wc,size = 0.15)
wordcloud2::wordcloud2(data = wc,size = 0.15,
color = 'random-light',
backgroundColor = 'black')
#| fig-align: center
#| echo: true
#| warning: false
#| message: false
ggplot(visual3, aes(x = reorder(reg,mdl_tot), y = mdl_tot)) + # Cria gráfico de barras ordenado pelo total de medalhas
geom_bar(stat = "identity", aes(fill = color)) + # Define o tipo de gráfico e as cores
geom_text(aes(label = round(mdl_tot)), vjust = 0.5, hjust = 1, size = 4, fontface = "bold") + # Adiciona texto às barras
coord_flip() + # Inverte os eixos
theme_minimal() + # Aplica tema minimalista
theme(
axis.title.x = element_blank(), # Remove título do eixo x
axis.title.y = element_blank(), # Remove título do eixo y
axis.text.x = element_blank(), # Remove texto do eixo x
axis.ticks.x = element_blank(), # Remove ticks do eixo x
axis.text.y = element_text(size = 10, face = "bold"),  # Ajusta texto do eixo y
panel.grid = element_blank(), # Remove grid
plot.title = element_text(size = 0, face = "bold", hjust = 0.5),# Ajusta título
strip.text = element_text(size = 7.5, face = "bold", color = "black")  # Ajusta título do facet
) +
labs(title = "") + # Define título
scale_fill_identity()+ # Aplica as cores definidas manualmente
tidytext::scale_x_reordered() +  # Ajusta etiquetas do eixo x
facet_wrap(~Sport, scales = "free_y") # Facet wrap por esporte com escalas livres no eixo y
#| fig-align: center
#| echo: true
#| warning: false
#| message: false
ggplot(visual3, aes(x = reorder(reg,mdl_tot), y = mdl_tot)) + # Cria gráfico de barras ordenado pelo total de medalhas
geom_bar(stat = "identity", aes(fill = color)) + # Define o tipo de gráfico e as cores
geom_text(aes(label = round(mdl_tot)), vjust = 0.5, hjust = 1, size = 4, fontface = "bold") + # Adiciona texto às barras
coord_flip() + # Inverte os eixos
theme_minimal() + # Aplica tema minimalista
theme(
axis.title.x = element_blank(), # Remove título do eixo x
axis.title.y = element_blank(), # Remove título do eixo y
axis.text.x = element_blank(), # Remove texto do eixo x
axis.ticks.x = element_blank(), # Remove ticks do eixo x
axis.text.y = element_text(size = 10, face = "bold"),  # Ajusta texto do eixo y
panel.grid = element_blank(), # Remove grid
plot.title = element_text(size = 0, face = "bold", hjust = 0.5),# Ajusta título
strip.text = element_text(size = 8, face = "bold", color = "black")  # Ajusta título do facet
) +
labs(title = "") + # Define título
scale_fill_identity()+ # Aplica as cores definidas manualmente
tidytext::scale_x_reordered() +  # Ajusta etiquetas do eixo x
facet_wrap(~Sport, scales = "free_y") # Facet wrap por esporte com escalas livres no eixo y
5+1
5 |> +1
5 |> exp(2)
1
setwd()
setwd()
getwd()
dados = read.csv(file = 'DDS_OLI_PAI_GRF_BAR.csv',header = T,na.strings = c('na','null'),sep = ';',encoding = 'latin1',dec = ',') # Carrega os dados do arquivo CSV
p = ggplot(dados, aes(x = reorder(paste0(reg, ' | ', NOC), ger_prop_f), y = ger_prop_f)) +
geom_bar(stat = "identity",
fill = scales::gradient_n_pal(c("darkorange", "orange", "#FFA07A"))(seq(0, 1, length.out = nrow(visual)))) +
geom_text(aes(label = paste0(round(ger_prop_f * 100, 1), '%')),
vjust = 0.5, hjust = 1.25, size = 7.5, fontface = "bold",color = 'black') +
coord_flip() +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 20, face = "bold",color = 'white'),
panel.grid = element_blank(),
plot.title = element_text(size = 0, face = "bold", hjust = 0.5),
plot.background = element_rect(fill = scales::alpha("black", 1), color = NA),  # Ajuste a transparência do fundo do plot
panel.background = element_rect(fill = scales::alpha("black", 1),color = NA)  # Transparência do painel (opcional)
) +
labs(title = "")
#| fig-align: center
#| echo: true
#| warning: false
#| message: false
library(dplyr)
library(ggplot2)
library(leaflet)
library(rnaturalearth)
library(rnaturalearthdata)
library(sf)
dados = read.csv(file = 'DDS_OLI_PAI_GRF_BAR.csv',header = T,na.strings = c('na','null'),sep = ';',encoding = 'latin1',dec = ',') # Carrega os dados do arquivo CSV
p = ggplot(dados, aes(x = reorder(paste0(reg, ' | ', NOC), ger_prop_f), y = ger_prop_f)) +
geom_bar(stat = "identity",
fill = scales::gradient_n_pal(c("darkorange", "orange", "#FFA07A"))(seq(0, 1, length.out = nrow(visual)))) +
geom_text(aes(label = paste0(round(ger_prop_f * 100, 1), '%')),
vjust = 0.5, hjust = 1.25, size = 7.5, fontface = "bold",color = 'black') +
coord_flip() +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 20, face = "bold",color = 'white'),
panel.grid = element_blank(),
plot.title = element_text(size = 0, face = "bold", hjust = 0.5),
plot.background = element_rect(fill = scales::alpha("black", 1), color = NA),  # Ajuste a transparência do fundo do plot
panel.background = element_rect(fill = scales::alpha("black", 1),color = NA)  # Transparência do painel (opcional)
) +
labs(title = "")
dados = read.csv(file = 'DDS_OLI_PAI_GRF_BAR.csv',header = T,na.strings = c('na','null'),sep = ';',encoding = 'latin1',dec = ',') # Carrega os dados do arquivo CSV
p = ggplot(dados, aes(x = reorder(paste0(reg, ' | ', NOC), ger_prop_f), y = ger_prop_f)) +
geom_bar(stat = "identity",
fill = scales::gradient_n_pal(c("darkorange", "orange", "#FFA07A"))(seq(0, 1, length.out = nrow(dados)))) +
geom_text(aes(label = paste0(round(ger_prop_f * 100, 1), '%')),
vjust = 0.5, hjust = 1.25, size = 7.5, fontface = "bold",color = 'black') +
coord_flip() +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 20, face = "bold",color = 'white'),
panel.grid = element_blank(),
plot.title = element_text(size = 0, face = "bold", hjust = 0.5),
plot.background = element_rect(fill = scales::alpha("black", 1), color = NA),  # Ajuste a transparência do fundo do plot
panel.background = element_rect(fill = scales::alpha("black", 1),color = NA)  # Transparência do painel (opcional)
) +
labs(title = "")
p
dados = read.csv(file = 'DDS_OLI_PAI_GRF_BAR.csv',header = T,na.strings = c('na','null'),sep = ';',encoding = 'latin1',dec = ',') # Carrega os dados do arquivo CSV
p = ggplot(dados, aes(x = reorder(paste0(reg, ' | ', NOC), ger_prop_f), y = ger_prop_f)) +
geom_bar(stat = "identity",
fill = scales::gradient_n_pal(c("deeppink", "pink", "lightpink"))(seq(0, 1, length.out = nrow(dados)))) +
geom_text(aes(label = paste0(round(ger_prop_f * 100, 1), '%')),
vjust = 0.5, hjust = 1.25, size = 7.5, fontface = "bold",color = 'black') +
coord_flip() +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 20, face = "bold",color = 'white'),
panel.grid = element_blank(),
plot.title = element_text(size = 0, face = "bold", hjust = 0.5),
plot.background = element_rect(fill = scales::alpha("black", 1), color = NA),  # Ajuste a transparência do fundo do plot
panel.background = element_rect(fill = scales::alpha("black", 1),color = NA)  # Transparência do painel (opcional)
) +
labs(title = "")
p
{
#| fig-align: center
#| echo: true
#| warning: false
#| message: false
# Carrega os dados de um arquivo CSV chamado 'DDS_OLI_PAI_GRF_MAP.csv'
# Define que a primeira linha do arquivo contém os nomes das colunas
# Valores como 'na' e 'null' serão tratados como valores ausentes (NA)
# O separador de colunas no arquivo é ';', a codificação dos caracteres é 'latin1'
# e os valores numéricos utilizam ',' como separador decimal
visual = read.csv(file = 'DDS_OLI_PAI_GRF_MAP.csv', header = TRUE, na.strings = c('na', 'null'), sep = ';', encoding = 'latin1', dec = ',')
# Carrega um mapa do mundo com uma resolução média e o retorna como um objeto de classe 'sf' (geometria espacial)
world <- ne_countries(scale = "medium", returnclass = "sf")
# Faz a junção dos dados carregados do CSV com o mapa do mundo
# A junção é feita utilizando a coluna 'admin' do mapa e a coluna 'reg' dos dados
# O parâmetro 'all = TRUE' mantém todas as regiões do mapa, mesmo se não houver correspondência nos dados
dados <- merge(world, visual, all = TRUE, by.x = "admin", by.y = "reg")
# Remove as linhas do conjunto de dados que possuem valores ausentes (NA) na coluna 'ger_prop_f'
dados <- dados[!is.na(dados$ger_prop_f), ]
# Verifica o tipo de geometria das regiões no conjunto de dados
st_geometry_type(dados)
# Filtra os dados para manter apenas regiões com geometria do tipo 'POLYGON' ou 'MULTIPOLYGON'
dados <- dados[st_geometry_type(dados) %in% c("POLYGON", "MULTIPOLYGON"), ]
# Converte qualquer geometria complexa em polígonos simples, se necessário
dados <- st_cast(dados, "POLYGON")
# Define uma paleta de cores para o mapa, com diferentes tons
paleta = c('white', "gray75", "pink", "deeppink")
# Cria um mapa interativo usando o pacote leaflet, com os dados processados
mapa = leaflet(dados) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%  # Adiciona um tema de fundo escuro ao mapa
addPolygons(
fillColor = ~colorNumeric(palette = paleta, domain = dados$ger_prop_f)(ger_prop_f),  # Preenche as regiões com cores baseadas nos valores de 'ger_prop_f'
fillOpacity = 0.7,  # Define a transparência do preenchimento das regiões
color = "white",    # Define a cor das bordas das regiões
weight = 1,         # Define a espessura das bordas
opacity = 1,        # Define a opacidade das bordas
highlight = highlightOptions(
weight = 3,        # Aumenta a espessura das bordas ao passar o mouse
color = "black",   # Muda a cor das bordas para preto ao passar o mouse
fillOpacity = 0.7, # Mantém a transparência ao passar o mouse
bringToFront = TRUE # Traz a região para frente ao passar o mouse
),
label = ~paste0(admin, ": ", round(ger_prop_f * 100, 2), "%"),  # Cria rótulos com o nome da região e o valor de 'ger_prop_f' arredondado
labelOptions = labelOptions(
style = list("font-weight" = "bold", "color" = "black"),  # Define o texto dos rótulos como negrito e de cor preta
textsize = "15px",   # Define o tamanho do texto dos rótulos
direction = "auto",  # Direção automática para posicionar os rótulos
opacity = 0.9,       # Define a opacidade dos rótulos
offset = c(0, 0)     # Define o deslocamento dos rótulos
)
) %>%
addLegend(
pal = colorNumeric(palette = paleta, domain = dados$ger_prop_f),  # Adiciona uma legenda ao mapa usando a mesma paleta de cores
values = ~ger_prop_f,  # Define os valores que serão exibidos na legenda
opacity = 0.7,         # Define a transparência da legenda
title = "Proporção Feminina",  # Define o título da legenda
position = "bottomright",  # Posiciona a legenda no canto inferior direito
labFormat = labelFormat(suffix = "%")  # Formata os rótulos da legenda com o sufixo '%'
) %>%
addMiniMap(tiles = providers$CartoDB.Positron, toggleDisplay = TRUE) %>%  # Adiciona um mini mapa no canto inferior direito
addLayersControl(
baseGroups = c("Dark Matter"),  # Adiciona a opção de controle de camadas
options = layersControlOptions(collapsed = FALSE)  # Configura o controle de camadas para que ele não seja colapsável
) %>%
setView(lng = 0, lat = 20, zoom = 2)  # Centraliza o mapa na longitude 0 e latitude 20, com zoom inicial de 2
}
# Cria um mapa interativo usando o pacote leaflet, com os dados processados
mapa = leaflet(dados) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%  # Adiciona um tema de fundo escuro ao mapa
addPolygons(
fillColor = ~colorNumeric(palette = paleta, domain = dados$ger_prop_f)(ger_prop_f),  # Preenche as regiões com cores baseadas nos valores de 'ger_prop_f'
fillOpacity = 0.7,  # Define a transparência do preenchimento das regiões
color = "white",    # Define a cor das bordas das regiões
weight = 1,         # Define a espessura das bordas
opacity = 1,        # Define a opacidade das bordas
highlight = highlightOptions(
weight = 3,        # Aumenta a espessura das bordas ao passar o mouse
color = "black",   # Muda a cor das bordas para preto ao passar o mouse
fillOpacity = 0.7, # Mantém a transparência ao passar o mouse
bringToFront = TRUE # Traz a região para frente ao passar o mouse
),
label = ~paste0(admin, ": ", round(ger_prop_f * 100, 2), "%"),  # Cria rótulos com o nome da região e o valor de 'ger_prop_f' arredondado
labelOptions = labelOptions(
style = list("font-weight" = "bold", "color" = "black"),  # Define o texto dos rótulos como negrito e de cor preta
textsize = "15px",   # Define o tamanho do texto dos rótulos
direction = "auto",  # Direção automática para posicionar os rótulos
opacity = 0.9,       # Define a opacidade dos rótulos
offset = c(0, 0)     # Define o deslocamento dos rótulos
)
) %>%
addLegend(
pal = colorNumeric(palette = paleta, domain = dados$ger_prop_f),  # Adiciona uma legenda ao mapa usando a mesma paleta de cores
values = ~ger_prop_f,  # Define os valores que serão exibidos na legenda
opacity = 0.7,         # Define a transparência da legenda
title = "Proporção Feminina",  # Define o título da legenda
position = "bottomright",  # Posiciona a legenda no canto inferior direito
labFormat = labelFormat(suffix = "%")  # Formata os rótulos da legenda com o sufixo '%'
) %>%
addMiniMap(tiles = providers$CartoDB.Positron, toggleDisplay = TRUE) %>%  # Adiciona um mini mapa no canto inferior direito
addLayersControl(
baseGroups = c("Dark Matter"),  # Adiciona a opção de controle de camadas
options = layersControlOptions(collapsed = FALSE)  # Configura o controle de camadas para que ele não seja colapsável
) %>%
setView(lng = 0, lat = 20, zoom = 2)  # Centraliza o mapa na longitude 0 e latitude 20, com zoom inicial de 2
mapa
