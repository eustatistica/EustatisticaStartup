"$('.dataTables_filter input').attr('placeholder', 'Pesquisar...');",  # Placeholder para o campo de pesquisa
"$('.dataTables_filter input').css({'background-image': 'url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/svgs/solid/search.svg)', 'background-position': '10px center', 'background-repeat': 'no-repeat', 'padding-left': '30px'});",
"});"
)
)
library(DT)
# Dados de exemplo
data <- data.frame(
a = c(1, 2, 3, 4, 5),
b = c('a', 'b', 'c', 'd', 'e'),
c = 1:5, d = 1:5, e = 1:5, f = 1:5, g = 1:5, h = 1:5,
i = 1:5, l = 1:5, m = 1:5, n = 1:5, p = 1:5, o = 1:5
)
# Configuração da tabela
datatable(
data,
extensions = c('Buttons', 'ColReorder'),  # Extensões para botões e reordenamento de colunas
options = list(
dom = 'Blfrtip',  # Exibe: "B" (buttons), "l" (length change), "f" (filter), "t" (table), "i" (info), "p" (pagination)
paging = TRUE,   # Habilita a navegação por páginas
pageLength = 10,  # Define o número inicial de linhas por página
lengthChange = TRUE,  # Permite mudar o número de linhas por página
scrollX = TRUE,  # Habilita a rolagem horizontal
scrollCollapse = TRUE,  # Colapsa a tabela ao rolar
columnDefs = list(
list(
targets = "_all", # Aplica para todas as colunas
searchable = TRUE  # Permite pesquisa em todas as colunas
)
),
buttons = list(
'colvis'  # Botão para mostrar/ocultar colunas
),
language = list(
search = "Pesquisar:",
lengthMenu = "Mostrar _MENU_ entradas",
info = "Mostrando _START_ a _END_ de _TOTAL_ entradas",
infoEmpty = "Mostrando 0 a 0 de 0 entradas",
infoFiltered = "(filtrado de _MAX_ entradas totais)",
paginate = list(
first = "Primeiro",
previous = "Anterior",
`next` = "Próximo",
last = "Último"
),
emptyTable = "Nenhum dado disponível na tabela",
zeroRecords = "Nenhum registro correspondente encontrado"
),
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#2f2f2f', 'color': '#fff'});",
"$(this.api().table().body()).css({'background-color': '#2f2f2f', 'color': '#fff'});",
"$(this.api().table().footer()).css({'background-color': '#2f2f2f', 'color': '#fff'});",  # Footer da tabela
"$(this.api().table().container()).css({'background-color': '#2f2f2f', 'color': '#fff'});",  # Container da tabela
"$('.dataTables_length select').css({'background-color': '#2f2f2f', 'color': '#fff'});",  # Fundo do seletor de linhas por página
"$('.dataTables_info').css({'background-color': '#2f2f2f', 'color': '#fff'});",  # Informações de paginação
"$('.dataTables_paginate').css({'background-color': '#2f2f2f', 'color': '#fff'});",  # Paginação
"$('.dataTables_processing').css({'background-color': '#2f2f2f', 'color': '#fff'});",  # Processando
"$('.dataTables_filter input').css({'background-color': '#2f2f2f', 'color': '#fff', 'border': '1px solid #fff'});",  # Campo de pesquisa
"$('.dt-button-collection').css({'background-color': '#2f2f2f', 'color': '#fff'});",  # Menu de visibilidade de colunas
"$('.dt-button-collection button').css({'color': '#fff'});",  # Botões dentro do menu de visibilidade de colunas
"}"
)
),
callback = JS(
"table.on('init.dt', function() {",
"$('.dataTables_filter input').attr('placeholder', 'Pesquisar...');",  # Placeholder para o campo de pesquisa
"$('.dataTables_filter input').css({'background-image': 'url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/svgs/solid/search.svg)', 'background-position': '10px center', 'background-repeat': 'no-repeat', 'padding-left': '30px'});",
"});"
)
)
library(DT)
# Dados de exemplo
data <- data.frame(
a = c(1, 2, 3, 4, 5),
b = c('a', 'b', 'c', 'd', 'e'),
c = 1:5, d = 1:5, e = 1:5, f = 1:5, g = 1:5, h = 1:5,
i = 1:5, l = 1:5, m = 1:5, n = 1:5, p = 1:5, o = 1:5
)
# Configuração da tabela
datatable(
data,
extensions = 'ColReorder',  # Removemos 'Buttons' pois não é mais necessário
options = list(
dom = 'lfrtip',  # Removemos 'B' (buttons) do DOM
paging = TRUE,   # Habilita a navegação por páginas
pageLength = 10,  # Define o número inicial de linhas por página
lengthChange = TRUE,  # Permite mudar o número de linhas por página
scrollX = TRUE,  # Habilita a rolagem horizontal
scrollCollapse = TRUE,  # Colapsa a tabela ao rolar
columnDefs = list(
list(
targets = "_all", # Aplica para todas as colunas
searchable = TRUE  # Permite pesquisa em todas as colunas
)
),
language = list(
search = "Pesquisar:",
lengthMenu = "Mostrar _MENU_ entradas",
info = "Mostrando _START_ a _END_ de _TOTAL_ entradas",
infoEmpty = "Mostrando 0 a 0 de 0 entradas",
infoFiltered = "(filtrado de _MAX_ entradas totais)",
paginate = list(
first = "Primeiro",
previous = "Anterior",
`next` = "Próximo",
last = "Último"
),
emptyTable = "Nenhum dado disponível na tabela",
zeroRecords = "Nenhum registro correspondente encontrado"
),
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#2f2f2f', 'color': '#fff'});",
"$(this.api().table().body()).css({'background-color': '#2f2f2f', 'color': '#fff'});",
"$(this.api().table().footer()).css({'background-color': '#2f2f2f', 'color': '#fff'});",  # Footer da tabela
"$(this.api().table().container()).css({'background-color': '#2f2f2f', 'color': '#fff'});",  # Container da tabela
"$('.dataTables_length select').css({'background-color': '#2f2f2f', 'color': '#fff'});",  # Fundo do seletor de linhas por página
"$('.dataTables_info').css({'background-color': '#2f2f2f', 'color': '#fff'});",  # Informações de paginação
"$('.dataTables_paginate').css({'background-color': '#2f2f2f', 'color': '#fff'});",  # Paginação
"$('.dataTables_processing').css({'background-color': '#2f2f2f', 'color': '#fff'});",  # Processando
"$('.dataTables_filter input').css({'background-color': '#2f2f2f', 'color': '#fff', 'border': '1px solid #fff'});",  # Campo de pesquisa
"}"
)
),
callback = JS(
"table.on('init.dt', function() {",
"$('.dataTables_filter input').attr('placeholder', 'Pesquisar...');",  # Placeholder para o campo de pesquisa
"$('.dataTables_filter input').css({'background-image': 'url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/svgs/solid/search.svg)', 'background-position': '10px center', 'background-repeat': 'no-repeat', 'padding-left': '30px'});",
"});"
)
)
library(DT)
# Dados de exemplo
data <- data.frame(
a = c(1, 2, 3, 4, 5),
b = c('a', 'b', 'c', 'd', 'e'),
c = 1:5, d = 1:5, e = 1:5, f = 1:5, g = 1:5, h = 1:5,
i = 1:5, l = 1:5, m = 1:5, n = 1:5, p = 1:5, o = 1:5
)
# Configuração da tabela
datatable(
data,
extensions = 'ColReorder',  # Removemos 'Buttons' pois não é mais necessário
options = list(
dom = 'lfrtip',  # Removemos 'B' (buttons) do DOM
paging = TRUE,   # Habilita a navegação por páginas
pageLength = 10,  # Define o número inicial de linhas por página
lengthChange = TRUE,  # Permite mudar o número de linhas por página
scrollX = TRUE,  # Habilita a rolagem horizontal
scrollCollapse = TRUE,  # Colapsa a tabela ao rolar
columnDefs = list(
list(
targets = "_all", # Aplica para todas as colunas
searchable = TRUE  # Permite pesquisa em todas as colunas
)
),
language = list(
search = "Pesquisar:",
lengthMenu = "Mostrar _MENU_ entradas",
info = "Mostrando _START_ a _END_ de _TOTAL_ entradas",
infoEmpty = "Mostrando 0 a 0 de 0 entradas",
infoFiltered = "(filtrado de _MAX_ entradas totais)",
paginate = list(
first = "Primeiro",
previous = "Anterior",
`next` = "Próximo",
last = "Último"
),
emptyTable = "Nenhum dado disponível na tabela",
zeroRecords = "Nenhum registro correspondente encontrado"
),
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#2f2f2f', 'color': '#fff'});",
"$(this.api().table().body()).css({'background-color': '#2f2f2f', 'color': '#fff'});",
"$(this.api().table().footer()).css({'background-color': '#2f2f2f', 'color': '#fff'});",  # Footer da tabela
"$(this.api().table().container()).css({'background-color': '#2f2f2f', 'color': '#fff'});",  # Container da tabela
"$('.dataTables_length select').css({'background-color': '#2f2f2f', 'color': '#fff'});",  # Fundo do seletor de linhas por página
"$('.dataTables_info').css({'background-color': '#2f2f2f', 'color': '#fff'});",  # Informações de paginação
"$('.dataTables_paginate').css({'background-color': '#2f2f2f', 'color': '#fff'});",  # Paginação
"$('.dataTables_processing').css({'background-color': '#2f2f2f', 'color': '#fff'});",  # Processando
"$('.dataTables_filter input').css({'background-color': '#2f2f2f', 'color': '#fff', 'border': '1px solid #fff'});",  # Campo de pesquisa
"}"
)
),
callback = JS(
"table.on('init.dt', function() {",
"$('.dataTables_filter input').attr('placeholder', 'Pesquisar...');",  # Placeholder para o campo de pesquisa
"$('.dataTables_filter input').css({'background-image': 'url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/svgs/solid/search.svg)', 'background-position': '10px center', 'background-repeat': 'no-repeat', 'padding-left': '30px'});",
"});"
)
)
"Semelhança entre jogadores"
loc = "C:/Users/pedro/Desktop/CONSULTORIA/MINI PROJETOS/RECOMENDACAO/MUSICAS"
'Carregando Pacotes'
{
require(stringr)
require(jsonlite)
library(archive)
require(dplyr)
require(tidyr)
require(data.table)
setwd(loc)
getwd()
}
dados = fread(paste0("BI_MUSICAS_4_BR",".csv"),header = T,encoding = 'Latin-1',dec = ',',sep = ';',na.strings = c('null','NA'))
colnames(dados)
dados[1,]
colnames(dados) %in% c('jogador_id','semelhantes_id','nota','artists')
colnames(dados) %in% c('jogador_id','semelhantes_id','nota','artists','album_name')
dados[,colnames(dados) %in% c('jogador_id','semelhantes_id','nota','artists','album_name')]
dados[,colnames(dados) %in% c('jogador_id','semelhantes_id','nota','artists','album_name')]
dados = data.frame(dados)
dados[,colnames(dados) %in% c('jogador_id','semelhantes_id','nota','artists','album_name')]
dados = dados[,colnames(dados) %in% c('jogador_id','semelhantes_id','nota','artists','album_name')]
colnames(dados) = c('musica','musica_parecida','nivel_de_similaridade','artistas','album')
dados |> arrange(-nivel_de_similaridade)
dados |> arrange(-nivel_de_similaridade) |> as.tibble()
require(tbl
)
require(tbl)
require(tibble)
dados |> arrange(-nivel_de_similaridade) |> as.tibble()
dados = dados |> filter(musica != musica_parecida)
dados |> arrange(-nivel_de_similaridade) |> as.tibble()
dados |> arrange(-nivel_de_similaridade) |> as.tibble()
dados = dados |> arrange(-nivel_de_similaridade)
write.table(dados, file = paste0("POST_MUSICAS_BR",".csv"), sep = ";", na = "null", quote = TRUE, row.names = FALSE,fileEncoding = "latin1",dec = ",")
library(DT)
# Dados de exemplo
data <- data.frame(
a = c(1, 2, 3, 4, 5),
b = c('a', 'b', 'c', 'd', 'e'),
c = 1:5, d = 1:5, e = 1:5, f = 1:5, g = 1:5, h = 1:5,
i = 1:5, l = 1:5, m = 1:5, n = 1:5, p = 1:5, o = 1:5
)
# Configuração da tabela
datatable(
data,
extensions = 'ColReorder',
options = list(
dom = 'lfrtip',
paging = TRUE,
pageLength = 10,
lengthChange = TRUE,
scrollX = TRUE,
scrollCollapse = TRUE,
columnDefs = list(
list(
targets = "_all",
searchable = TRUE
)
),
language = list(
search = "Pesquisar:",
lengthMenu = "Mostrar _MENU_ entradas",
info = "Mostrando _START_ a _END_ de _TOTAL_ entradas",
infoEmpty = "Mostrando 0 a 0 de 0 entradas",
infoFiltered = "(filtrado de _MAX_ entradas totais)",
paginate = list(
first = "Primeiro",
previous = "Anterior",
`next` = "Próximo",
last = "Último"
),
emptyTable = "Nenhum dado disponível na tabela",
zeroRecords = "Nenhum registro correspondente encontrado"
),
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#00FFFF', 'color': '#000'});",
"$(this.api().table().body()).css({'background-color': '#00FFFF', 'color': '#000'});",
"$(this.api().table().footer()).css({'background-color': '#00FFFF', 'color': '#000'});",
"$(this.api().table().container()).css({'background-color': '#00FFFF', 'color': '#000'});",
"$('.dataTables_length select').css({'background-color': '#00FFFF', 'color': '#000'});",
"$('.dataTables_info').css({'background-color': '#00FFFF', 'color': '#000'});",
"$('.dataTables_paginate').css({'background-color': '#00FFFF', 'color': '#000'});",
"$('.dataTables_processing').css({'background-color': '#00FFFF', 'color': '#000'});",
"$('.dataTables_filter input').css({'background-color': '#00FFFF', 'color': '#000', 'border': '1px solid #000'});",
"}"
)
),
callback = JS(
"table.on('init.dt', function() {",
"$('.dataTables_filter input').attr('placeholder', 'Pesquisar...');",
"$('.dataTables_filter input').css({'background-image': 'url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/svgs/solid/search.svg)', 'background-position': '10px center', 'background-repeat': 'no-repeat', 'padding-left': '30px'});",
"});"
)
)
library(DT)
# Dados de exemplo
data <- data.frame(
a = c(1, 2, 3, 4, 5),
b = c('a', 'b', 'c', 'd', 'e'),
c = 1:5, d = 1:5, e = 1:5, f = 1:5, g = 1:5, h = 1:5,
i = 1:5, l = 1:5, m = 1:5, n = 1:5, p = 1:5, o = 1:5
)
# Configuração da tabela
datatable(
data,
extensions = 'ColReorder',
options = list(
dom = 'lfrtip',
paging = TRUE,
pageLength = 10,
lengthChange = TRUE,
scrollX = TRUE,
scrollCollapse = TRUE,
columnDefs = list(
list(
targets = "_all",
searchable = TRUE
)
),
language = list(
search = "Pesquisar:",
lengthMenu = "Mostrar _MENU_ entradas",
info = "Mostrando _START_ a _END_ de _TOTAL_ entradas",
infoEmpty = "Mostrando 0 a 0 de 0 entradas",
infoFiltered = "(filtrado de _MAX_ entradas totais)",
paginate = list(
first = "Primeiro",
previous = "Anterior",
`next` = "Próximo",
last = "Último"
),
emptyTable = "Nenhum dado disponível na tabela",
zeroRecords = "Nenhum registro correspondente encontrado"
),
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#E0FFFF', 'color': '#000'});",
"$(this.api().table().body()).css({'background-color': '#E0FFFF', 'color': '#000'});",
"$(this.api().table().footer()).css({'background-color': '#E0FFFF', 'color': '#000'});",
"$(this.api().table().container()).css({'background-color': '#E0FFFF', 'color': '#000', 'border': '2px solid #000'});",  # Adiciona borda preta ao redor da tabela
"$('.dataTables_length select').css({'background-color': '#E0FFFF', 'color': '#000'});",
"$('.dataTables_info').css({'background-color': '#E0FFFF', 'color': '#000'});",
"$('.dataTables_paginate').css({'background-color': '#E0FFFF', 'color': '#000'});",
"$('.dataTables_processing').css({'background-color': '#E0FFFF', 'color': '#000'});",
"$('.dataTables_filter input').css({'background-color': '#E0FFFF', 'color': '#000', 'border': '1px solid #000'});",
"}"
)
),
callback = JS(
"table.on('init.dt', function() {",
"$('.dataTables_filter input').attr('placeholder', 'Pesquisar...');",
"$('.dataTables_filter input').css({'background-image': 'url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/svgs/solid/search.svg)', 'background-position': '10px center', 'background-repeat': 'no-repeat', 'padding-left': '30px'});",
"});"
)
)
dados = fread(paste0("BI_MUSICAS_4_BR",".csv"),header = T,encoding = 'Latin-1',dec = ',',sep = ';',na.strings = c('null','NA'))
colnames(dados)
dados[1,]
dados = data.frame(dados)
dados$jogador_id = paste0(dados$jogador_id,' - ',dados$artistas)
dados = dados[,colnames(dados) %in% c('jogador_id','semelhantes_id','nota')]
colnames(dados) = c('musica','musica_parecida','nivel_de_similaridade')
require(tibble)
dados = dados |> filter(musica != musica_parecida)
dados = dados |> arrange(-nivel_de_similaridade)
dados |> arrange(-nivel_de_similaridade) |> as.tibble()
dados = fread(paste0("BI_MUSICAS_4_BR",".csv"),header = T,encoding = 'Latin-1',dec = ',',sep = ';',na.strings = c('null','NA'))
colnames(dados)
dados[1,]
dados = dados |> filter(musica != musica_parecida)
dados = dados[,colnames(dados) %in% c('jogador_id','semelhantes_id','nota')]
colnames(dados) = c('musica','musica_parecida','nivel_de_similaridade')
require(tibble)
dados = fread(paste0("BI_MUSICAS_4_BR",".csv"),header = T,encoding = 'Latin-1',dec = ',',sep = ';',na.strings = c('null','NA'))
colnames(dados)
dados[1,]
dados = dados |> filter(jogador_id != semelhantes_id)
dados = data.frame(dados)
dados$jogador_id = paste0(dados$jogador_id,' - ',dados$artistas)
dados = dados[,colnames(dados) %in% c('jogador_id','semelhantes_id','nota')]
colnames(dados) = c('musica','musica_parecida','nivel_de_similaridade')
require(tibble)
dados = dados |> arrange(-nivel_de_similaridade)
dados |> arrange(-nivel_de_similaridade) |> as.tibble()
dados = fread(paste0("BI_MUSICAS_4_BR",".csv"),header = T,encoding = 'Latin-1',dec = ',',sep = ';',na.strings = c('null','NA'))
colnames(dados)
dados[1,]
dados = dados |> filter(jogador_id != semelhantes_id)
dados = data.frame(dados)
dados$jogador_id = paste0(dados$jogador_id,' - ',dados$artists)
dados = dados[,colnames(dados) %in% c('jogador_id','semelhantes_id','nota')]
colnames(dados) = c('musica','musica_parecida','nivel_de_similaridade')
require(tibble)
dados = dados |> arrange(-nivel_de_similaridade)
dados |> arrange(-nivel_de_similaridade) |> as.tibble()
write.table(dados, file = paste0("POST_MUSICAS_BR",".csv"), sep = ";", na = "null", quote = TRUE, row.names = FALSE,fileEncoding = "latin1",dec = ",")
dados = fread(paste0("BI_MUSICAS_4_US",".csv"),header = T,encoding = 'Latin-1',dec = ',',sep = ';',na.strings = c('null','NA'))
colnames(dados)
dados[1,]
dados = dados |> filter(jogador_id != semelhantes_id)
dados = data.frame(dados)
dados$jogador_id = paste0(dados$jogador_id,' - ',dados$artists)
dados = dados[,colnames(dados) %in% c('jogador_id','semelhantes_id','nota')]
colnames(dados) = c('musica','musica_parecida','nivel_de_similaridade')
require(tibble)
dados = dados |> arrange(-nivel_de_similaridade)
dados |> arrange(-nivel_de_similaridade) |> as.tibble()
write.table(dados, file = paste0("POST_MUSICAS_US",".csv"), sep = ";", na = "null", quote = TRUE, row.names = FALSE,fileEncoding = "latin1",dec = ",")
dados = fread(paste0("POST_MUSICAS_BR",".csv"),header = T,encoding = 'Latin-1',dec = ',',sep = ';',na.strings = c('null','NA'))
# Configuração da tabela
datatable(
dados,
extensions = 'ColReorder',
options = list(
dom = 'lfrtip',
paging = TRUE,
pageLength = 10,
lengthChange = TRUE,
scrollX = TRUE,
scrollCollapse = TRUE,
columnDefs = list(
list(
targets = "_all",
searchable = TRUE
)
),
language = list(
search = "Pesquisar:",
lengthMenu = "Mostrar _MENU_ entradas",
info = "Mostrando _START_ a _END_ de _TOTAL_ entradas",
infoEmpty = "Mostrando 0 a 0 de 0 entradas",
infoFiltered = "(filtrado de _MAX_ entradas totais)",
paginate = list(
first = "Primeiro",
previous = "Anterior",
`next` = "Próximo",
last = "Último"
),
emptyTable = "Nenhum dado disponível na tabela",
zeroRecords = "Nenhum registro correspondente encontrado"
),
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#E0FFFF', 'color': '#000'});",
"$(this.api().table().body()).css({'background-color': '#E0FFFF', 'color': '#000'});",
"$(this.api().table().footer()).css({'background-color': '#E0FFFF', 'color': '#000'});",
"$(this.api().table().container()).css({'background-color': '#E0FFFF', 'color': '#000', 'border': '2px solid #000'});",  # Adiciona borda preta ao redor da tabela
"$('.dataTables_length select').css({'background-color': '#E0FFFF', 'color': '#000'});",
"$('.dataTables_info').css({'background-color': '#E0FFFF', 'color': '#000'});",
"$('.dataTables_paginate').css({'background-color': '#E0FFFF', 'color': '#000'});",
"$('.dataTables_processing').css({'background-color': '#E0FFFF', 'color': '#000'});",
"$('.dataTables_filter input').css({'background-color': '#E0FFFF', 'color': '#000', 'border': '1px solid #000'});",
"}"
)
),
callback = JS(
"table.on('init.dt', function() {",
"$('.dataTables_filter input').attr('placeholder', 'Pesquisar...');",
"$('.dataTables_filter input').css({'background-image': 'url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/svgs/solid/search.svg)', 'background-position': '10px center', 'background-repeat': 'no-repeat', 'padding-left': '30px'});",
"});"
)
)
dados$nivel_de_similaridade = round(dados$nivel_de_similaridade,0)
# Configuração da tabela
datatable(
dados,
extensions = 'ColReorder',
options = list(
dom = 'lfrtip',
paging = TRUE,
pageLength = 10,
lengthChange = TRUE,
scrollX = TRUE,
scrollCollapse = TRUE,
columnDefs = list(
list(
targets = "_all",
searchable = TRUE
)
),
language = list(
search = "Pesquisar:",
lengthMenu = "Mostrar _MENU_ entradas",
info = "Mostrando _START_ a _END_ de _TOTAL_ entradas",
infoEmpty = "Mostrando 0 a 0 de 0 entradas",
infoFiltered = "(filtrado de _MAX_ entradas totais)",
paginate = list(
first = "Primeiro",
previous = "Anterior",
`next` = "Próximo",
last = "Último"
),
emptyTable = "Nenhum dado disponível na tabela",
zeroRecords = "Nenhum registro correspondente encontrado"
),
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#E0FFFF', 'color': '#000'});",
"$(this.api().table().body()).css({'background-color': '#E0FFFF', 'color': '#000'});",
"$(this.api().table().footer()).css({'background-color': '#E0FFFF', 'color': '#000'});",
"$(this.api().table().container()).css({'background-color': '#E0FFFF', 'color': '#000', 'border': '2px solid #000'});",  # Adiciona borda preta ao redor da tabela
"$('.dataTables_length select').css({'background-color': '#E0FFFF', 'color': '#000'});",
"$('.dataTables_info').css({'background-color': '#E0FFFF', 'color': '#000'});",
"$('.dataTables_paginate').css({'background-color': '#E0FFFF', 'color': '#000'});",
"$('.dataTables_processing').css({'background-color': '#E0FFFF', 'color': '#000'});",
"$('.dataTables_filter input').css({'background-color': '#E0FFFF', 'color': '#000', 'border': '1px solid #000'});",
"}"
)
),
callback = JS(
"table.on('init.dt', function() {",
"$('.dataTables_filter input').attr('placeholder', 'Pesquisar...');",
"$('.dataTables_filter input').css({'background-image': 'url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/svgs/solid/search.svg)', 'background-position': '10px center', 'background-repeat': 'no-repeat', 'padding-left': '30px'});",
"});"
)
)
