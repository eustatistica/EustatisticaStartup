scale_fill_identity()+ # Aplica as cores definidas manualmente
tidytext::scale_x_reordered() +  # Ajusta etiquetas do eixo x
facet_wrap(~Sport, scales = "free_y") # Facet wrap por esporte com escalas livres no eixo y
#| fig-align: center
#| echo: true
#| warning: false
#| message: false
ggplot(visual2, aes(x = reorder(reg,mdl_tot), y = mdl_tot)) + # Cria gráfico de barras ordenado pelo total de medalhas
geom_bar(stat = "identity", aes(fill = color)) + # Define o tipo de gráfico e as cores
geom_text(aes(label = round(mdl_tot)), vjust = 0.5, hjust = 1, size = 4, fontface = "bold") + # Adiciona texto às barras
coord_flip() + # Inverte os eixos
theme_minimal() + # Aplica tema minimalista
theme(
axis.title.x = element_blank(), # Remove título do eixo x
axis.title.y = element_blank(), # Remove título do eixo y
axis.text.x = element_blank(), # Remove texto do eixo x
axis.ticks.x = element_blank(), # Remove ticks do eixo x
axis.text.y = element_text(size = 10, face = "bold"),  # Ajusta texto do eixo y
panel.grid = element_blank(), # Remove grid
plot.title = element_text(size = 12, face = "bold", hjust = 0.5),# Ajusta título
strip.text = element_text(size = 10, face = "bold", color = "black")  # Ajusta título do facet
) +
labs(title = "") + # Define título
scale_fill_identity()+ # Aplica as cores definidas manualmente
tidytext::scale_x_reordered() +  # Ajusta etiquetas do eixo x
facet_wrap(~Sport, scales = "free_y") # Facet wrap por esporte com escalas livres no eixo y
#| fig-align: center
#| echo: true
#| warning: false
#| message: false
ggplot(visual3, aes(x = reorder(reg,mdl_tot), y = mdl_tot)) + # Cria gráfico de barras ordenado pelo total de medalhas
geom_bar(stat = "identity", aes(fill = color)) + # Define o tipo de gráfico e as cores
geom_text(aes(label = round(mdl_tot)), vjust = 0.5, hjust = 1, size = 4, fontface = "bold") + # Adiciona texto às barras
coord_flip() + # Inverte os eixos
theme_minimal() + # Aplica tema minimalista
theme(
axis.title.x = element_blank(), # Remove título do eixo x
axis.title.y = element_blank(), # Remove título do eixo y
axis.text.x = element_blank(), # Remove texto do eixo x
axis.ticks.x = element_blank(), # Remove ticks do eixo x
axis.text.y = element_text(size = 10, face = "bold"),  # Ajusta texto do eixo y
panel.grid = element_blank(), # Remove grid
plot.title = element_text(size = 12, face = "bold", hjust = 0.5),# Ajusta título
strip.text = element_text(size = 10, face = "bold", color = "black")  # Ajusta título do facet
) +
labs(title = "") + # Define título
scale_fill_identity()+ # Aplica as cores definidas manualmente
tidytext::scale_x_reordered() +  # Ajusta etiquetas do eixo x
facet_wrap(~Sport, scales = "free_y") # Facet wrap por esporte com escalas livres no eixo y
#| fig-align: center
#| echo: true
#| warning: false
#| message: false
ggplot(visual4, aes(x = reorder(reg,mdl_tot), y = mdl_tot)) + # Cria gráfico de barras ordenado pelo total de medalhas
geom_bar(stat = "identity", aes(fill = color)) + # Define o tipo de gráfico e as cores
geom_text(aes(label = round(mdl_tot)), vjust = 0.5, hjust = 1, size = 4, fontface = "bold") + # Adiciona texto às barras
coord_flip() + # Inverte os eixos
theme_minimal() + # Aplica tema minimalista
theme(
axis.title.x = element_blank(), # Remove título do eixo x
axis.title.y = element_blank(), # Remove título do eixo y
axis.text.x = element_blank(), # Remove texto do eixo x
axis.ticks.x = element_blank(), # Remove ticks do eixo x
axis.text.y = element_text(size = 10, face = "bold"),  # Ajusta texto do eixo y
panel.grid = element_blank(), # Remove grid
plot.title = element_text(size = 12, face = "bold", hjust = 0.5),# Ajusta título
strip.text = element_text(size = 10, face = "bold", color = "black")  # Ajusta título do facet
) +
labs(title = "") + # Define título
scale_fill_identity()+ # Aplica as cores definidas manualmente
tidytext::scale_x_reordered() +  # Ajusta etiquetas do eixo x
facet_wrap(~Sport, scales = "free_y") # Facet wrap por esporte com escalas livres no eixo y
#| fig-align: center
#| echo: true
#| warning: false
#| message: false
ggplot(visual5, aes(x = reorder(reg,mdl_tot), y = mdl_tot)) + # Cria gráfico de barras ordenado pelo total de medalhas
geom_bar(stat = "identity", aes(fill = color)) + # Define o tipo de gráfico e as cores
geom_text(aes(label = round(mdl_tot)), vjust = 0.5, hjust = 1, size = 4, fontface = "bold") + # Adiciona texto às barras
coord_flip() + # Inverte os eixos
theme_minimal() + # Aplica tema minimalista
theme(
axis.title.x = element_blank(), # Remove título do eixo x
axis.title.y = element_blank(), # Remove título do eixo y
axis.text.x = element_blank(), # Remove texto do eixo x
axis.ticks.x = element_blank(), # Remove ticks do eixo x
axis.text.y = element_text(size = 10, face = "bold"),  # Ajusta texto do eixo y
panel.grid = element_blank(), # Remove grid
plot.title = element_text(size = 12, face = "bold", hjust = 0.5),# Ajusta título
strip.text = element_text(size = 10, face = "bold", color = "black")  # Ajusta título do facet
) +
labs(title = "") + # Define título
scale_fill_identity()+ # Aplica as cores definidas manualmente
tidytext::scale_x_reordered() +  # Ajusta etiquetas do eixo x
facet_wrap(~Sport, scales = "free_y") # Facet wrap por esporte com escalas livres no eixo y
#| fig-align: center
#| echo: true
#| warning: false
#| message: false
{
visual = sel |>
arrange(-ger_prop_f) |> # Ordena pela proporção de atletas femininas
select(NOC,reg,ger_mdl_tot,ger_qtd_atletas_f,ger_prop_f,ger_qtd_atletas_m) |> # Seleciona as colunas relevantes
filter(ger_qtd_atletas_f+ger_qtd_atletas_m >= 20) |> # Filtra para total de atletas >= 20
distinct() |> # Remove duplicatas
head(25) # Seleciona os top 20
sel |>
arrange(-ger_prop_f) |> # Ordena pela proporção de atletas femininas
select(NOC,reg,ger_mdl_tot,ger_qtd_atletas_f,ger_prop_f,ger_qtd_atletas_m) |> # Seleciona as colunas relevantes
filter(ger_qtd_atletas_f+ger_qtd_atletas_m >= 20) |> # Filtra para total de atletas >= 20
distinct() |> # Remove duplicatas
head(25) # Seleciona os top 20
visual[,c('ger_prop_f','NOC','reg')]
ggplot(visual, aes(x = reorder(paste0(reg,' | ',NOC), ger_prop_f), y = ger_prop_f)) + # Cria gráfico de barras ordenado pela proporção de atletas femininas
geom_bar(stat = "identity", fill = scales::gradient_n_pal(c("deeppink", "pink", "lightpink" ))(seq(0, 1, length.out = nrow(visual)))) + # Define as cores das barras
geom_text(aes(label = paste0(round(ger_prop_f*100,1),'%')), vjust = 0.5, hjust = 1.25, size = 3.5, fontface = "bold") + # Adiciona texto às barras
coord_flip() + # Inverte os eixos
theme_minimal() + # Aplica tema minimalista
theme(
axis.title.x = element_blank(), # Remove título do eixo x
axis.title.y = element_blank(), # Remove título do eixo y
axis.text.x = element_blank(), # Remove texto do eixo x
axis.ticks.x = element_blank(), # Remove ticks do eixo x
axis.text.y = element_text(size = 10, face = "bold"),  # Ajusta texto do eixo y
panel.grid = element_blank(), # Remove grid
plot.title = element_text(size = 14, face = "bold", hjust = 0.5)  # Ajusta título
) +
labs(title = "") # Define título
}
#| fig-align: center
#| echo: true
#| warning: false
#| message: false
{
visual = sel |>
arrange(ger_prop_f) |> # Ordena pela proporção de atletas femininas
select(NOC,reg,ger_mdl_tot,ger_qtd_atletas_f,ger_prop_f,ger_qtd_atletas_m) |> # Seleciona as colunas relevantes
filter(ger_qtd_atletas_f+ger_qtd_atletas_m >= 20) |> # Filtra para total de atletas >= 20
distinct() |> # Remove duplicatas
head(25) # Seleciona os top 20
ggplot(visual, aes(x = reorder(paste0(reg,' | ',NOC), -ger_prop_f), y = ger_prop_f)) + # Cria gráfico de barras ordenado pela proporção de atletas femininas
geom_bar(stat = "identity", fill = scales::gradient_n_pal(c("lightpink", "pink", "deeppink" ))(seq(0, 1, length.out = nrow(visual)))) + # Define as cores das barras
geom_text(aes(label = paste0(round(ger_prop_f*100,1),'%')), vjust = 0.5, hjust = 1.25, size = 3.5, fontface = "bold") + # Adiciona texto às barras
coord_flip() + # Inverte os eixos
theme_minimal() + # Aplica tema minimalista
theme(
axis.title.x = element_blank(), # Remove título do eixo x
axis.title.y = element_blank(), # Remove título do eixo y
axis.text.x = element_blank(), # Remove texto do eixo x
axis.ticks.x = element_blank(), # Remove ticks do eixo x
axis.text.y = element_text(size = 10, face = "bold"),  # Ajusta texto do eixo y
panel.grid = element_blank(), # Remove grid
plot.title = element_text(size = 14, face = "bold", hjust = 0.5)  # Ajusta título
) +
labs(title = "") # Define título
}
require(DT)
#| fig-align: center
#| echo: true
#| warning: false
#| message: false
dados = read.csv(file = 'dataset_olympics.csv',header = T) # Carrega os dados do arquivo CSV
noc = read.csv(file = 'noc_region.csv',header = T) # Carrega os dados do arquivo CSV
str(dados) # Mostra a estrutura dos dados
datatable(dados[1:10, ],
options = list(pageLength = 10, autoWidth = TRUE),
rownames = FALSE) # Exibe as primeiras 10 linhas dos dados
#| fig-align: center
#| echo: true
#| warning: false
#| message: false
dados = read.csv(file = 'dataset_olympics.csv',header = T) # Carrega os dados do arquivo CSV
noc = read.csv(file = 'noc_region.csv',header = T) # Carrega os dados do arquivo CSV
str(dados) # Mostra a estrutura dos dados
# Exibe as primeiras 10 linhas dos dados como uma tabela dinâmica com estilo personalizado
datatable(
dados[1:10, ],
class = 'cell-border stripe',
style = "bootstrap",
callback = JS(
"table.on('draw.dt', function() {",
"$('table.dataTable').css({'background-color': 'black', 'color': 'white'});",
"$('table.dataTable thead th').css({'background-color': '#333', 'color': 'white'});",
"$('table.dataTable tfoot th').css({'background-color': '#333', 'color': 'white'});",
"$('table.dataTable tbody tr').css({'background-color': 'black', 'color': 'white'});",
"$('table.dataTable tbody tr:hover').css({'background-color': '#444', 'color': 'white'});",
"});"
)
)
#| fig-align: center
#| echo: true
#| warning: false
#| message: false
dados = read.csv(file = 'dataset_olympics.csv',header = T) # Carrega os dados do arquivo CSV
noc = read.csv(file = 'noc_region.csv',header = T) # Carrega os dados do arquivo CSV
#str(dados) # Mostra a estrutura dos dados
# Exibe as primeiras 10 linhas dos dados como uma tabela dinâmica com estilo personalizado
datatable(
dados[,],
options = list(pageLength = 5, autoWidth = TRUE),
rownames = FALSE,
class = 'cell-border stripe',
style = "bootstrap",
callback = JS(
"table.on('draw.dt', function() {",
"$('table.dataTable').css({'background-color': 'black', 'color': 'white'});",
"$('table.dataTable thead th').css({'background-color': '#333', 'color': 'white'});",
"$('table.dataTable tfoot th').css({'background-color': '#333', 'color': 'white'});",
"$('table.dataTable tbody tr').css({'background-color': 'black', 'color': 'white'});",
"$('table.dataTable tbody tr:hover').css({'background-color': '#444', 'color': 'white'});",
"});"
)
)
#| fig-align: center
#| echo: true
#| warning: false
#| message: false
dados = read.csv(file = 'dataset_olympics.csv',header = T) # Carrega os dados do arquivo CSV
noc = read.csv(file = 'noc_region.csv',header = T) # Carrega os dados do arquivo CSV
#str(dados) # Mostra a estrutura dos dados
# Exibe as primeiras 10 linhas dos dados como uma tabela dinâmica com estilo personalizado
datatable(
dados[,],
options = list(
pageLength = 10,
autoWidth = TRUE,
columnDefs = list(
list(targets = '_all', className = 'dt-center'),  # Centraliza os dados
list(targets = '_all', render = JS(
"function(data, type, row, meta) {",
"return '<span style=\"font-size:12px;\">' + data + '</span>';",
"}"))
),
scrollX = TRUE  # Adiciona barra de rolagem horizontal se necessário
),
rownames = FALSE,
class = 'cell-border stripe',
style = "bootstrap",
callback = JS(
"table.on('draw.dt', function() {",
"$('table.dataTable').css({'background-color': 'black', 'color': 'white'});",
"$('table.dataTable thead th').css({'background-color': '#333', 'color': 'white'});",
"$('table.dataTable tfoot th').css({'background-color': '#333', 'color': 'white'});",
"$('table.dataTable tbody tr').css({'background-color': 'black', 'color': 'white'});",
"$('table.dataTable tbody tr:hover').css({'background-color': '#444', 'color': 'white'});",
"});"
)
)
#| fig-align: center
#| echo: true
#| warning: false
#| message: false
visual = sel |>
filter(reg != 'NA') |>
filter(rank_mdl_tot <= 3) |> # Filtra os top 3 no ranking de total de medalhas
arrange(Sport,rank_mdl_tot) |> # Ordena por Sport e ranking de total de medalhas
select(NOC,Sport,rank_mdl_tot,reg,mdl_tot) |> # Seleciona as colunas relevantes
mutate(
color = case_when(
rank_mdl_tot <= 1.5 ~ "gold", # Cor para o 1º lugar
rank_mdl_tot <= 2.5 ~ "#C0C0C0", # Cor para o 2º lugar
rank_mdl_tot <= 3.5 ~ "#CD7F32", # Cor para o 3º lugar
TRUE ~ "#E0E0E0" # Cor para os demais
)
)
#length(unique(visual$Sport)) # Conta os valores únicos da coluna Sport
visual$reg <- tidytext::reorder_within(visual$reg, visual$mdl_tot, visual$Sport) # Reordena dentro de cada esporte
sports = visual |> group_by(Sport) |> summarise(s = sum(mdl_tot)) |> arrange(-s) |> select(Sport) |> pull()
visual1 = visual[visual$Sport %in% sports[1:9],] # Filtra os primeiros 18 esportes
visual2 = visual[visual$Sport %in% sports[10:18],] # Filtra os próximos 18 esportes
visual3 = visual[visual$Sport %in% sports[19:27],] # Filtra os últimos esportes
visual4 = visual[visual$Sport %in% sports[28:36],] # Filtra os últimos esportes
visual5 = visual[visual$Sport %in% sports[37:45],] # Filtra os últimos esportes
visual6 = visual[visual$Sport %in% sports[46:54],] # Filtra os últimos esportes
library(tidytext) # Carrega o pacote tidytext
ggplot(visual1, aes(x = reorder(reg,mdl_tot), y = mdl_tot)) + # Cria gráfico de barras ordenado pelo total de medalhas
geom_bar(stat = "identity", aes(fill = color)) + # Define o tipo de gráfico e as cores
geom_text(aes(label = round(mdl_tot)), vjust = 0.5, hjust = 1, size = 4, fontface = "bold") + # Adiciona texto às barras
coord_flip() + # Inverte os eixos
theme_minimal() + # Aplica tema minimalista
theme(
axis.title.x = element_blank(), # Remove título do eixo x
axis.title.y = element_blank(), # Remove título do eixo y
axis.text.x = element_blank(), # Remove texto do eixo x
axis.ticks.x = element_blank(), # Remove ticks do eixo x
axis.text.y = element_text(size = 10, face = "bold"),  # Ajusta texto do eixo y
panel.grid = element_blank(), # Remove grid
plot.title = element_text(size = 12, face = "bold", hjust = 0.5),# Ajusta título
strip.text = element_text(size = 8, face = "bold", color = "black")  # Ajusta título do facet
) +
labs(title = "") + # Define título
scale_fill_identity()+ # Aplica as cores definidas manualmente
tidytext::scale_x_reordered() +  # Ajusta etiquetas do eixo x
facet_wrap(~Sport, scales = "free_y") # Facet wrap por esporte com escalas livres no eixo y
#| fig-align: center
#| echo: true
#| warning: false
#| message: false
visual = sel |>
filter(reg != 'NA') |>
filter(rank_mdl_tot <= 3) |> # Filtra os top 3 no ranking de total de medalhas
arrange(Sport,rank_mdl_tot) |> # Ordena por Sport e ranking de total de medalhas
select(NOC,Sport,rank_mdl_tot,reg,mdl_tot) |> # Seleciona as colunas relevantes
mutate(
color = case_when(
rank_mdl_tot <= 1.5 ~ "gold", # Cor para o 1º lugar
rank_mdl_tot <= 2.5 ~ "#C0C0C0", # Cor para o 2º lugar
rank_mdl_tot <= 3.5 ~ "#CD7F32", # Cor para o 3º lugar
TRUE ~ "#E0E0E0" # Cor para os demais
)
)
#length(unique(visual$Sport)) # Conta os valores únicos da coluna Sport
visual$reg <- tidytext::reorder_within(visual$reg, visual$mdl_tot, visual$Sport) # Reordena dentro de cada esporte
sports = visual |> group_by(Sport) |> summarise(s = sum(mdl_tot)) |> arrange(-s) |> select(Sport) |> pull()
visual1 = visual[visual$Sport %in% sports[1:9],] # Filtra os primeiros 18 esportes
visual2 = visual[visual$Sport %in% sports[10:18],] # Filtra os próximos 18 esportes
visual3 = visual[visual$Sport %in% sports[19:27],] # Filtra os últimos esportes
visual4 = visual[visual$Sport %in% sports[28:36],] # Filtra os últimos esportes
visual5 = visual[visual$Sport %in% sports[37:45],] # Filtra os últimos esportes
visual6 = visual[visual$Sport %in% sports[46:54],] # Filtra os últimos esportes
library(tidytext) # Carrega o pacote tidytext
ggplot(visual1, aes(x = reorder(reg,mdl_tot), y = mdl_tot)) + # Cria gráfico de barras ordenado pelo total de medalhas
geom_bar(stat = "identity", aes(fill = color)) + # Define o tipo de gráfico e as cores
geom_text(aes(label = round(mdl_tot)), vjust = 0.5, hjust = 1, size = 4, fontface = "bold") + # Adiciona texto às barras
coord_flip() + # Inverte os eixos
theme_minimal() + # Aplica tema minimalista
theme(
axis.title.x = element_blank(), # Remove título do eixo x
axis.title.y = element_blank(), # Remove título do eixo y
axis.text.x = element_blank(), # Remove texto do eixo x
axis.ticks.x = element_blank(), # Remove ticks do eixo x
axis.text.y = element_text(size = 10, face = "bold"),  # Ajusta texto do eixo y
panel.grid = element_blank(), # Remove grid
plot.title = element_text(size = 0, face = "bold", hjust = 0.5),# Ajusta título
strip.text = element_text(size = 9, face = "bold", color = "black")  # Ajusta título do facet
) +
labs(title = "") + # Define título
scale_fill_identity()+ # Aplica as cores definidas manualmente
tidytext::scale_x_reordered() +  # Ajusta etiquetas do eixo x
facet_wrap(~Sport, scales = "free_y") # Facet wrap por esporte com escalas livres no eixo y
#| fig-align: center
#| echo: true
#| warning: false
#| message: false
visual = sel |>
filter(reg != 'NA') |>
filter(rank_mdl_tot <= 3) |> # Filtra os top 3 no ranking de total de medalhas
arrange(Sport,rank_mdl_tot) |> # Ordena por Sport e ranking de total de medalhas
select(NOC,Sport,rank_mdl_tot,reg,mdl_tot) |> # Seleciona as colunas relevantes
mutate(
color = case_when(
rank_mdl_tot <= 1.5 ~ "gold", # Cor para o 1º lugar
rank_mdl_tot <= 2.5 ~ "#C0C0C0", # Cor para o 2º lugar
rank_mdl_tot <= 3.5 ~ "#CD7F32", # Cor para o 3º lugar
TRUE ~ "#E0E0E0" # Cor para os demais
)
)
#length(unique(visual$Sport)) # Conta os valores únicos da coluna Sport
visual$reg <- tidytext::reorder_within(visual$reg, visual$mdl_tot, visual$Sport) # Reordena dentro de cada esporte
sports = visual |> group_by(Sport) |> summarise(s = sum(mdl_tot)) |> arrange(-s) |> select(Sport) |> pull()
visual1 = visual[visual$Sport %in% sports[1:9],] # Filtra os primeiros 18 esportes
visual2 = visual[visual$Sport %in% sports[10:18],] # Filtra os próximos 18 esportes
visual3 = visual[visual$Sport %in% sports[19:27],] # Filtra os últimos esportes
visual4 = visual[visual$Sport %in% sports[28:36],] # Filtra os últimos esportes
visual5 = visual[visual$Sport %in% sports[37:45],] # Filtra os últimos esportes
visual6 = visual[visual$Sport %in% sports[46:54],] # Filtra os últimos esportes
library(tidytext) # Carrega o pacote tidytext
ggplot(visual1, aes(x = reorder(reg,mdl_tot), y = mdl_tot)) + # Cria gráfico de barras ordenado pelo total de medalhas
geom_bar(stat = "identity", aes(fill = color)) + # Define o tipo de gráfico e as cores
geom_text(aes(label = round(mdl_tot)), vjust = 0.5, hjust = 1, size = 4, fontface = "bold") + # Adiciona texto às barras
coord_flip() + # Inverte os eixos
theme_minimal() + # Aplica tema minimalista
theme(
axis.title.x = element_blank(), # Remove título do eixo x
axis.title.y = element_blank(), # Remove título do eixo y
axis.text.x = element_blank(), # Remove texto do eixo x
axis.ticks.x = element_blank(), # Remove ticks do eixo x
axis.text.y = element_text(size = 10, face = "bold"),  # Ajusta texto do eixo y
panel.grid = element_blank(), # Remove grid
plot.title = element_text(size = 0, face = "bold", hjust = 0.5),# Ajusta título
strip.text = element_text(size = 8, face = "bold", color = "black")  # Ajusta título do facet
) +
labs(title = "") + # Define título
scale_fill_identity()+ # Aplica as cores definidas manualmente
tidytext::scale_x_reordered() +  # Ajusta etiquetas do eixo x
facet_wrap(~Sport, scales = "free_y") # Facet wrap por esporte com escalas livres no eixo y
#| fig-align: center
#| echo: true
#| warning: false
#| message: false
visual = sel |>
filter(reg != 'NA') |>
filter(rank_mdl_tot <= 3) |> # Filtra os top 3 no ranking de total de medalhas
arrange(Sport,rank_mdl_tot) |> # Ordena por Sport e ranking de total de medalhas
select(NOC,Sport,rank_mdl_tot,reg,mdl_tot) |> # Seleciona as colunas relevantes
mutate(
color = case_when(
rank_mdl_tot <= 1.5 ~ "gold", # Cor para o 1º lugar
rank_mdl_tot <= 2.5 ~ "#C0C0C0", # Cor para o 2º lugar
rank_mdl_tot <= 3.5 ~ "#CD7F32", # Cor para o 3º lugar
TRUE ~ "#E0E0E0" # Cor para os demais
)
)
#length(unique(visual$Sport)) # Conta os valores únicos da coluna Sport
visual$reg <- tidytext::reorder_within(visual$reg, visual$mdl_tot, visual$Sport) # Reordena dentro de cada esporte
sports = visual |> group_by(Sport) |> summarise(s = sum(mdl_tot)) |> arrange(-s) |> select(Sport) |> pull()
visual1 = visual[visual$Sport %in% sports[1:9],] # Filtra os primeiros 18 esportes
visual2 = visual[visual$Sport %in% sports[10:18],] # Filtra os próximos 18 esportes
visual3 = visual[visual$Sport %in% sports[19:27],] # Filtra os últimos esportes
visual4 = visual[visual$Sport %in% sports[28:36],] # Filtra os últimos esportes
visual5 = visual[visual$Sport %in% sports[37:45],] # Filtra os últimos esportes
visual6 = visual[visual$Sport %in% sports[46:54],] # Filtra os últimos esportes
library(tidytext) # Carrega o pacote tidytext
ggplot(visual1, aes(x = reorder(reg,mdl_tot), y = mdl_tot)) + # Cria gráfico de barras ordenado pelo total de medalhas
geom_bar(stat = "identity", aes(fill = color)) + # Define o tipo de gráfico e as cores
geom_text(aes(label = round(mdl_tot)), vjust = 0.5, hjust = 1, size = 4, fontface = "bold") + # Adiciona texto às barras
coord_flip() + # Inverte os eixos
theme_minimal() + # Aplica tema minimalista
theme(
axis.title.x = element_blank(), # Remove título do eixo x
axis.title.y = element_blank(), # Remove título do eixo y
axis.text.x = element_blank(), # Remove texto do eixo x
axis.ticks.x = element_blank(), # Remove ticks do eixo x
axis.text.y = element_text(size = 10, face = "bold"),  # Ajusta texto do eixo y
panel.grid = element_blank(), # Remove grid
plot.title = element_text(size = 0, face = "bold", hjust = 0.5),# Ajusta título
strip.text = element_text(size = 8.5, face = "bold", color = "black")  # Ajusta título do facet
) +
labs(title = "") + # Define título
scale_fill_identity()+ # Aplica as cores definidas manualmente
tidytext::scale_x_reordered() +  # Ajusta etiquetas do eixo x
facet_wrap(~Sport, scales = "free_y") # Facet wrap por esporte com escalas livres no eixo y
#| fig-align: center
#| echo: true
#| warning: false
#| message: false
dados$Medal = ifelse(dados$Medal == '','Null',dados$Medal) # Substitui valores vazios em Medal por 'Null'
dados$aux = 1 # Cria uma coluna auxiliar com valor 1
dados = dados |>
pivot_wider(names_from = c(Medal),values_from = aux,values_fn = sum,values_fill = 0) |> # Transforma os dados em formato wide
as.data.frame() # Converte para data frame
wordcloud::wordcloud(unique(dados$Sport))
#unique(dados$Sport) # Mostra os valores únicos da coluna Sport
table(unique(dados$Sport))
as.data.frame(table(unique(dados$Sport)))
wc = as.data.frame(table(unique(dados$Sport)))
wordcloud::wordcloud(wc$Var1,freq = wc$Freq)
wordcloud::wordcloud(wc$Var1,freq = wc$Freq,scale = 0.5)
wordcloud::wordcloud(wc$Var1,freq = wc$Freq,scale = 1)
wordcloud::wordcloud(wc$Var1,freq = wc$Freq,scale = 2)
wordcloud2::::wordcloud2(wc$Var1,freq = wc$Freq,scale = 2)
wordcloud2::wordcloud2(wc$Var1,freq = wc$Freq,scale = 2)
wordcloud2::wordcloud2(wc$Var1)
wordcloud2::wordcloud2(wc$Var1,wc$Freq)
wordcloud2::wordcloud2(wc$Var1,wc$Freq)
wc
wordcloud2::wordcloud2(data = wc)
wordcloud2::wordcloud2(data = wc,size = 0.5)
wordcloud2::wordcloud2(data = wc,size = 0.1)
wordcloud2::wordcloud2(data = wc,size = 0.2)
wordcloud2::wordcloud2(data = wc,size = 0.2,shape = 'A')
wordcloud2::wordcloud2(data = wc,size = 0.2,shape = '.')
wordcloud2::wordcloud2(data = wc,size = 0.15)
wordcloud2::wordcloud2(data = wc,size = 0.15,
color = 'random-light',
backgroundColor = 'black')
#| fig-align: center
#| echo: true
#| warning: false
#| message: false
ggplot(visual3, aes(x = reorder(reg,mdl_tot), y = mdl_tot)) + # Cria gráfico de barras ordenado pelo total de medalhas
geom_bar(stat = "identity", aes(fill = color)) + # Define o tipo de gráfico e as cores
geom_text(aes(label = round(mdl_tot)), vjust = 0.5, hjust = 1, size = 4, fontface = "bold") + # Adiciona texto às barras
coord_flip() + # Inverte os eixos
theme_minimal() + # Aplica tema minimalista
theme(
axis.title.x = element_blank(), # Remove título do eixo x
axis.title.y = element_blank(), # Remove título do eixo y
axis.text.x = element_blank(), # Remove texto do eixo x
axis.ticks.x = element_blank(), # Remove ticks do eixo x
axis.text.y = element_text(size = 10, face = "bold"),  # Ajusta texto do eixo y
panel.grid = element_blank(), # Remove grid
plot.title = element_text(size = 0, face = "bold", hjust = 0.5),# Ajusta título
strip.text = element_text(size = 7.5, face = "bold", color = "black")  # Ajusta título do facet
) +
labs(title = "") + # Define título
scale_fill_identity()+ # Aplica as cores definidas manualmente
tidytext::scale_x_reordered() +  # Ajusta etiquetas do eixo x
facet_wrap(~Sport, scales = "free_y") # Facet wrap por esporte com escalas livres no eixo y
#| fig-align: center
#| echo: true
#| warning: false
#| message: false
ggplot(visual3, aes(x = reorder(reg,mdl_tot), y = mdl_tot)) + # Cria gráfico de barras ordenado pelo total de medalhas
geom_bar(stat = "identity", aes(fill = color)) + # Define o tipo de gráfico e as cores
geom_text(aes(label = round(mdl_tot)), vjust = 0.5, hjust = 1, size = 4, fontface = "bold") + # Adiciona texto às barras
coord_flip() + # Inverte os eixos
theme_minimal() + # Aplica tema minimalista
theme(
axis.title.x = element_blank(), # Remove título do eixo x
axis.title.y = element_blank(), # Remove título do eixo y
axis.text.x = element_blank(), # Remove texto do eixo x
axis.ticks.x = element_blank(), # Remove ticks do eixo x
axis.text.y = element_text(size = 10, face = "bold"),  # Ajusta texto do eixo y
panel.grid = element_blank(), # Remove grid
plot.title = element_text(size = 0, face = "bold", hjust = 0.5),# Ajusta título
strip.text = element_text(size = 8, face = "bold", color = "black")  # Ajusta título do facet
) +
labs(title = "") + # Define título
scale_fill_identity()+ # Aplica as cores definidas manualmente
tidytext::scale_x_reordered() +  # Ajusta etiquetas do eixo x
facet_wrap(~Sport, scales = "free_y") # Facet wrap por esporte com escalas livres no eixo y
