"$(this.api().table().container()).css({'background-color': '#2f2f2f', 'color': '#fff'});",  # Container da tabela
"$('.dataTables_length select').css({'background-color': '#2f2f2f', 'color': '#fff'});",  # Fundo do seletor de linhas por página
"$('.dataTables_info').css({'background-color': '#2f2f2f', 'color': '#fff'});",  # Informações de paginação
"$('.dataTables_paginate').css({'background-color': '#2f2f2f', 'color': '#fff'});",  # Paginação
"$('.dataTables_processing').css({'background-color': '#2f2f2f', 'color': '#fff'});",  # Processando
"$('.dataTables_filter input').css({'background-color': '#2f2f2f', 'color': '#fff', 'border': '1px solid #fff'});",  # Campo de pesquisa
"}"
)
),
callback = JS(
"table.on('init.dt', function() {",
"$('.dataTables_filter input').attr('placeholder', 'Pesquisar...');",  # Placeholder para o campo de pesquisa
"$('.dataTables_filter input').css({'background-image': 'url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/svgs/solid/search.svg)', 'background-position': '10px center', 'background-repeat': 'no-repeat', 'padding-left': '30px'});",
"});"
)
)
"Semelhança entre jogadores"
loc = "C:/Users/pedro/Desktop/CONSULTORIA/MINI PROJETOS/RECOMENDACAO/MUSICAS"
'Carregando Pacotes'
{
require(stringr)
require(jsonlite)
library(archive)
require(dplyr)
require(tidyr)
require(data.table)
setwd(loc)
getwd()
}
dados = fread(paste0("BI_MUSICAS_4_BR",".csv"),header = T,encoding = 'Latin-1',dec = ',',sep = ';',na.strings = c('null','NA'))
colnames(dados)
dados[1,]
colnames(dados) %in% c('jogador_id','semelhantes_id','nota','artists')
colnames(dados) %in% c('jogador_id','semelhantes_id','nota','artists','album_name')
dados[,colnames(dados) %in% c('jogador_id','semelhantes_id','nota','artists','album_name')]
dados[,colnames(dados) %in% c('jogador_id','semelhantes_id','nota','artists','album_name')]
dados = data.frame(dados)
dados[,colnames(dados) %in% c('jogador_id','semelhantes_id','nota','artists','album_name')]
dados = dados[,colnames(dados) %in% c('jogador_id','semelhantes_id','nota','artists','album_name')]
colnames(dados) = c('musica','musica_parecida','nivel_de_similaridade','artistas','album')
dados |> arrange(-nivel_de_similaridade)
dados |> arrange(-nivel_de_similaridade) |> as.tibble()
require(tbl
)
require(tbl)
require(tibble)
dados |> arrange(-nivel_de_similaridade) |> as.tibble()
dados = dados |> filter(musica != musica_parecida)
dados |> arrange(-nivel_de_similaridade) |> as.tibble()
dados |> arrange(-nivel_de_similaridade) |> as.tibble()
dados = dados |> arrange(-nivel_de_similaridade)
write.table(dados, file = paste0("POST_MUSICAS_BR",".csv"), sep = ";", na = "null", quote = TRUE, row.names = FALSE,fileEncoding = "latin1",dec = ",")
library(DT)
# Dados de exemplo
data <- data.frame(
a = c(1, 2, 3, 4, 5),
b = c('a', 'b', 'c', 'd', 'e'),
c = 1:5, d = 1:5, e = 1:5, f = 1:5, g = 1:5, h = 1:5,
i = 1:5, l = 1:5, m = 1:5, n = 1:5, p = 1:5, o = 1:5
)
# Configuração da tabela
datatable(
data,
extensions = 'ColReorder',
options = list(
dom = 'lfrtip',
paging = TRUE,
pageLength = 10,
lengthChange = TRUE,
scrollX = TRUE,
scrollCollapse = TRUE,
columnDefs = list(
list(
targets = "_all",
searchable = TRUE
)
),
language = list(
search = "Pesquisar:",
lengthMenu = "Mostrar _MENU_ entradas",
info = "Mostrando _START_ a _END_ de _TOTAL_ entradas",
infoEmpty = "Mostrando 0 a 0 de 0 entradas",
infoFiltered = "(filtrado de _MAX_ entradas totais)",
paginate = list(
first = "Primeiro",
previous = "Anterior",
`next` = "Próximo",
last = "Último"
),
emptyTable = "Nenhum dado disponível na tabela",
zeroRecords = "Nenhum registro correspondente encontrado"
),
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#00FFFF', 'color': '#000'});",
"$(this.api().table().body()).css({'background-color': '#00FFFF', 'color': '#000'});",
"$(this.api().table().footer()).css({'background-color': '#00FFFF', 'color': '#000'});",
"$(this.api().table().container()).css({'background-color': '#00FFFF', 'color': '#000'});",
"$('.dataTables_length select').css({'background-color': '#00FFFF', 'color': '#000'});",
"$('.dataTables_info').css({'background-color': '#00FFFF', 'color': '#000'});",
"$('.dataTables_paginate').css({'background-color': '#00FFFF', 'color': '#000'});",
"$('.dataTables_processing').css({'background-color': '#00FFFF', 'color': '#000'});",
"$('.dataTables_filter input').css({'background-color': '#00FFFF', 'color': '#000', 'border': '1px solid #000'});",
"}"
)
),
callback = JS(
"table.on('init.dt', function() {",
"$('.dataTables_filter input').attr('placeholder', 'Pesquisar...');",
"$('.dataTables_filter input').css({'background-image': 'url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/svgs/solid/search.svg)', 'background-position': '10px center', 'background-repeat': 'no-repeat', 'padding-left': '30px'});",
"});"
)
)
library(DT)
# Dados de exemplo
data <- data.frame(
a = c(1, 2, 3, 4, 5),
b = c('a', 'b', 'c', 'd', 'e'),
c = 1:5, d = 1:5, e = 1:5, f = 1:5, g = 1:5, h = 1:5,
i = 1:5, l = 1:5, m = 1:5, n = 1:5, p = 1:5, o = 1:5
)
# Configuração da tabela
datatable(
data,
extensions = 'ColReorder',
options = list(
dom = 'lfrtip',
paging = TRUE,
pageLength = 10,
lengthChange = TRUE,
scrollX = TRUE,
scrollCollapse = TRUE,
columnDefs = list(
list(
targets = "_all",
searchable = TRUE
)
),
language = list(
search = "Pesquisar:",
lengthMenu = "Mostrar _MENU_ entradas",
info = "Mostrando _START_ a _END_ de _TOTAL_ entradas",
infoEmpty = "Mostrando 0 a 0 de 0 entradas",
infoFiltered = "(filtrado de _MAX_ entradas totais)",
paginate = list(
first = "Primeiro",
previous = "Anterior",
`next` = "Próximo",
last = "Último"
),
emptyTable = "Nenhum dado disponível na tabela",
zeroRecords = "Nenhum registro correspondente encontrado"
),
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#E0FFFF', 'color': '#000'});",
"$(this.api().table().body()).css({'background-color': '#E0FFFF', 'color': '#000'});",
"$(this.api().table().footer()).css({'background-color': '#E0FFFF', 'color': '#000'});",
"$(this.api().table().container()).css({'background-color': '#E0FFFF', 'color': '#000', 'border': '2px solid #000'});",  # Adiciona borda preta ao redor da tabela
"$('.dataTables_length select').css({'background-color': '#E0FFFF', 'color': '#000'});",
"$('.dataTables_info').css({'background-color': '#E0FFFF', 'color': '#000'});",
"$('.dataTables_paginate').css({'background-color': '#E0FFFF', 'color': '#000'});",
"$('.dataTables_processing').css({'background-color': '#E0FFFF', 'color': '#000'});",
"$('.dataTables_filter input').css({'background-color': '#E0FFFF', 'color': '#000', 'border': '1px solid #000'});",
"}"
)
),
callback = JS(
"table.on('init.dt', function() {",
"$('.dataTables_filter input').attr('placeholder', 'Pesquisar...');",
"$('.dataTables_filter input').css({'background-image': 'url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/svgs/solid/search.svg)', 'background-position': '10px center', 'background-repeat': 'no-repeat', 'padding-left': '30px'});",
"});"
)
)
dados = fread(paste0("BI_MUSICAS_4_BR",".csv"),header = T,encoding = 'Latin-1',dec = ',',sep = ';',na.strings = c('null','NA'))
colnames(dados)
dados[1,]
dados = data.frame(dados)
dados$jogador_id = paste0(dados$jogador_id,' - ',dados$artistas)
dados = dados[,colnames(dados) %in% c('jogador_id','semelhantes_id','nota')]
colnames(dados) = c('musica','musica_parecida','nivel_de_similaridade')
require(tibble)
dados = dados |> filter(musica != musica_parecida)
dados = dados |> arrange(-nivel_de_similaridade)
dados |> arrange(-nivel_de_similaridade) |> as.tibble()
dados = fread(paste0("BI_MUSICAS_4_BR",".csv"),header = T,encoding = 'Latin-1',dec = ',',sep = ';',na.strings = c('null','NA'))
colnames(dados)
dados[1,]
dados = dados |> filter(musica != musica_parecida)
dados = dados[,colnames(dados) %in% c('jogador_id','semelhantes_id','nota')]
colnames(dados) = c('musica','musica_parecida','nivel_de_similaridade')
require(tibble)
dados = fread(paste0("BI_MUSICAS_4_BR",".csv"),header = T,encoding = 'Latin-1',dec = ',',sep = ';',na.strings = c('null','NA'))
colnames(dados)
dados[1,]
dados = dados |> filter(jogador_id != semelhantes_id)
dados = data.frame(dados)
dados$jogador_id = paste0(dados$jogador_id,' - ',dados$artistas)
dados = dados[,colnames(dados) %in% c('jogador_id','semelhantes_id','nota')]
colnames(dados) = c('musica','musica_parecida','nivel_de_similaridade')
require(tibble)
dados = dados |> arrange(-nivel_de_similaridade)
dados |> arrange(-nivel_de_similaridade) |> as.tibble()
dados = fread(paste0("BI_MUSICAS_4_BR",".csv"),header = T,encoding = 'Latin-1',dec = ',',sep = ';',na.strings = c('null','NA'))
colnames(dados)
dados[1,]
dados = dados |> filter(jogador_id != semelhantes_id)
dados = data.frame(dados)
dados$jogador_id = paste0(dados$jogador_id,' - ',dados$artists)
dados = dados[,colnames(dados) %in% c('jogador_id','semelhantes_id','nota')]
colnames(dados) = c('musica','musica_parecida','nivel_de_similaridade')
require(tibble)
dados = dados |> arrange(-nivel_de_similaridade)
dados |> arrange(-nivel_de_similaridade) |> as.tibble()
write.table(dados, file = paste0("POST_MUSICAS_BR",".csv"), sep = ";", na = "null", quote = TRUE, row.names = FALSE,fileEncoding = "latin1",dec = ",")
dados = fread(paste0("BI_MUSICAS_4_US",".csv"),header = T,encoding = 'Latin-1',dec = ',',sep = ';',na.strings = c('null','NA'))
colnames(dados)
dados[1,]
dados = dados |> filter(jogador_id != semelhantes_id)
dados = data.frame(dados)
dados$jogador_id = paste0(dados$jogador_id,' - ',dados$artists)
dados = dados[,colnames(dados) %in% c('jogador_id','semelhantes_id','nota')]
colnames(dados) = c('musica','musica_parecida','nivel_de_similaridade')
require(tibble)
dados = dados |> arrange(-nivel_de_similaridade)
dados |> arrange(-nivel_de_similaridade) |> as.tibble()
write.table(dados, file = paste0("POST_MUSICAS_US",".csv"), sep = ";", na = "null", quote = TRUE, row.names = FALSE,fileEncoding = "latin1",dec = ",")
dados = fread(paste0("POST_MUSICAS_BR",".csv"),header = T,encoding = 'Latin-1',dec = ',',sep = ';',na.strings = c('null','NA'))
# Configuração da tabela
datatable(
dados,
extensions = 'ColReorder',
options = list(
dom = 'lfrtip',
paging = TRUE,
pageLength = 10,
lengthChange = TRUE,
scrollX = TRUE,
scrollCollapse = TRUE,
columnDefs = list(
list(
targets = "_all",
searchable = TRUE
)
),
language = list(
search = "Pesquisar:",
lengthMenu = "Mostrar _MENU_ entradas",
info = "Mostrando _START_ a _END_ de _TOTAL_ entradas",
infoEmpty = "Mostrando 0 a 0 de 0 entradas",
infoFiltered = "(filtrado de _MAX_ entradas totais)",
paginate = list(
first = "Primeiro",
previous = "Anterior",
`next` = "Próximo",
last = "Último"
),
emptyTable = "Nenhum dado disponível na tabela",
zeroRecords = "Nenhum registro correspondente encontrado"
),
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#E0FFFF', 'color': '#000'});",
"$(this.api().table().body()).css({'background-color': '#E0FFFF', 'color': '#000'});",
"$(this.api().table().footer()).css({'background-color': '#E0FFFF', 'color': '#000'});",
"$(this.api().table().container()).css({'background-color': '#E0FFFF', 'color': '#000', 'border': '2px solid #000'});",  # Adiciona borda preta ao redor da tabela
"$('.dataTables_length select').css({'background-color': '#E0FFFF', 'color': '#000'});",
"$('.dataTables_info').css({'background-color': '#E0FFFF', 'color': '#000'});",
"$('.dataTables_paginate').css({'background-color': '#E0FFFF', 'color': '#000'});",
"$('.dataTables_processing').css({'background-color': '#E0FFFF', 'color': '#000'});",
"$('.dataTables_filter input').css({'background-color': '#E0FFFF', 'color': '#000', 'border': '1px solid #000'});",
"}"
)
),
callback = JS(
"table.on('init.dt', function() {",
"$('.dataTables_filter input').attr('placeholder', 'Pesquisar...');",
"$('.dataTables_filter input').css({'background-image': 'url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/svgs/solid/search.svg)', 'background-position': '10px center', 'background-repeat': 'no-repeat', 'padding-left': '30px'});",
"});"
)
)
dados$nivel_de_similaridade = round(dados$nivel_de_similaridade,0)
# Configuração da tabela
datatable(
dados,
extensions = 'ColReorder',
options = list(
dom = 'lfrtip',
paging = TRUE,
pageLength = 10,
lengthChange = TRUE,
scrollX = TRUE,
scrollCollapse = TRUE,
columnDefs = list(
list(
targets = "_all",
searchable = TRUE
)
),
language = list(
search = "Pesquisar:",
lengthMenu = "Mostrar _MENU_ entradas",
info = "Mostrando _START_ a _END_ de _TOTAL_ entradas",
infoEmpty = "Mostrando 0 a 0 de 0 entradas",
infoFiltered = "(filtrado de _MAX_ entradas totais)",
paginate = list(
first = "Primeiro",
previous = "Anterior",
`next` = "Próximo",
last = "Último"
),
emptyTable = "Nenhum dado disponível na tabela",
zeroRecords = "Nenhum registro correspondente encontrado"
),
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#E0FFFF', 'color': '#000'});",
"$(this.api().table().body()).css({'background-color': '#E0FFFF', 'color': '#000'});",
"$(this.api().table().footer()).css({'background-color': '#E0FFFF', 'color': '#000'});",
"$(this.api().table().container()).css({'background-color': '#E0FFFF', 'color': '#000', 'border': '2px solid #000'});",  # Adiciona borda preta ao redor da tabela
"$('.dataTables_length select').css({'background-color': '#E0FFFF', 'color': '#000'});",
"$('.dataTables_info').css({'background-color': '#E0FFFF', 'color': '#000'});",
"$('.dataTables_paginate').css({'background-color': '#E0FFFF', 'color': '#000'});",
"$('.dataTables_processing').css({'background-color': '#E0FFFF', 'color': '#000'});",
"$('.dataTables_filter input').css({'background-color': '#E0FFFF', 'color': '#000', 'border': '1px solid #000'});",
"}"
)
),
callback = JS(
"table.on('init.dt', function() {",
"$('.dataTables_filter input').attr('placeholder', 'Pesquisar...');",
"$('.dataTables_filter input').css({'background-image': 'url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/svgs/solid/search.svg)', 'background-position': '10px center', 'background-repeat': 'no-repeat', 'padding-left': '30px'});",
"});"
)
)
require(readxl)
require(readxl)
read.xlsx('TESTES_BUILDS.xlsx',Sheet = 'DICIONÁRIO MOBILE')
read_xlsx('TESTES_BUILDS.xlsx',Sheet = 'DICIONÁRIO MOBILE')
read_xlsx('TESTES_BUILDS.xlsx',sheet= 'DICIONÁRIO MOBILE')
setwd("C:/Users/pedro/Desktop/MODALIDADES/FREE FIRE/2025/EMULADOR")
require(readxl)
read_xlsx('TESTES_BUILDS.xlsx',sheet = 'DICIONÁRIO MOBILE')
read_xlsx('TESTES BUILDS.xlsx',sheet = 'DICIONÁRIO MOBILE')
dicio = read_xlsx('TESTES BUILDS.xlsx',sheet = 'DICIONÁRIO MOBILE')
dicio = read_xlsx('TESTES BUILDS.xlsx',sheet = 'DICIONÁRIO COMPS MOBILE')
historico = read_xlsx('TESTES BUILDS.xlsx',sheet = 'HISTÓRICO COMPS MOBILE')
historico
dicio
dicio |> filter(PLAYER == 'GENERAL')
dicio |> filter(PLAYER == 'GENERAL')
require(dplyr)
dicio |> filter(PLAYER == 'GENERAL')
dicio |> filter(PLAYER == 'GENERAL')
dicio |> filter(PLAYER == 'GENERAL') |> mutate(PLAYER = 'MTSEXY')
bind_rows(dicio,dicio |> filter(PLAYER == 'GENERAL') |> mutate(PLAYER = 'MTSEXY'))
dicio = bind_rows(dicio,dicio |> filter(PLAYER == 'GENERAL') |> mutate(PLAYER = 'MTSEXY'))
historico
merge(dicio,historico,by.y = 'COMP',by.x = 'COMP MACRO',all = T)
colnames(dicio)
merge(dicio,historico,by.x = 'COMP',by.y = 'COMP MACRO',all = T)
merge(dicio,historico,by.x = 'COMP',by.y = 'COMP MACRO',all.y =  = T)
merge(dicio,historico,by.x = 'COMP',by.y = 'COMP MACRO',all.y = T)
historico
# Carregar pacotes necessários
library(tidyverse)
library(lubridate)
# Dados de exemplo
dados <- historico
# Definir a data inicial (mínima dos dados) e a data final (data do sistema)
data_inicial <- min(dados$DATA)
data_final <- Sys.time()
# Criar uma sequência de datas diárias entre a data inicial e a data final
datas_completas <- tibble::tibble(
DATA = seq(data_inicial, data_final, by = "day")
)
# Juntar as datas completas com os dados originais
dados_completos <- datas_completas %>%
left_join(dados, by = "DATA") %>%
fill(`COMP MACRO`, `COMP QUEBRA`, .direction = "down")
# Exibir o resultado
print(dados_completos)
dados = merge(dicio,dados_completos,by.x = 'COMP',by.y = 'COMP MACRO',all.y = T)
dados
dados = dados |> select(-`COMP QUEBRA`)
dados
dados_macro = dados |> select(-`COMP QUEBRA`)
setwd("C:/Users/pedro/Desktop/MODALIDADES/FREE FIRE/2025/EMULADOR")
require(readxl)
require(dplyr)
library(tidyverse)
library(lubridate)
dicio = read_xlsx('TESTES BUILDS.xlsx',sheet = 'DICIONÁRIO COMPS MOBILE')
historico = read_xlsx('TESTES BUILDS.xlsx',sheet = 'HISTÓRICO COMPS MOBILE')
dicio = bind_rows(dicio,dicio |> filter(PLAYER == 'GENERAL') |> mutate(PLAYER = 'MTSEXY'))
dados <- historico
data_inicial <- min(dados$DATA)
data_final <- Sys.time()
datas_completas <- tibble::tibble(
DATA = seq(data_inicial, data_final, by = "day")
)
dados_completos <- datas_completas %>%
left_join(dados, by = "DATA") %>%
fill(`COMP MACRO`, `COMP QUEBRA`, .direction = "down")
print(dados_completos)
dados = merge(dicio,dados_completos,by.x = 'COMP',by.y = 'COMP MACRO',all.y = T)
dados_macro = dados |> select(-`COMP QUEBRA`)
dados = merge(dicio,dados_completos,by.x = 'COMP',by.y = 'COMP QUEBRA',all.y = T)
dados_quebra = dados |> select(-`COMP MACRO`)
dados
dados_macro
dados_quebra
str_detect(colnames(dados_quebra),'P1|P2|P3|P4')
ifelse(str_detect(colnames(dados_quebra),'P1|P2|P3|P4'),paste0(colnames(dados_quebra),'_QUEBRA',colnames(dados_quebra))
ifelse(str_detect(colnames(dados_quebra),'P1|P2|P3|P4'),paste0(colnames(dados_quebra),'_QUEBRA',colnames(dados_quebra)))
ifelse(str_detect(colnames(dados_quebra),'P1|P2|P3|P4'),paste0(colnames(dados_quebra),'_QUEBRA',colnames(dados_quebra)))
ifelse(str_detect(colnames(dados_quebra),'P1|P2|P3|P4') == T,paste0(colnames(dados_quebra),'_QUEBRA',colnames(dados_quebra)))
ifelse(str_detect(colnames(dados_quebra),'P1|P2|P3|P4') == T,paste0(colnames(dados_quebra),'_QUEBRA'),colnames(dados_quebra))
colnames(dados_quebra) = ifelse(str_detect(colnames(dados_quebra),'P1|P2|P3|P4') == T,paste0(colnames(dados_quebra),'_QUEBRA'),colnames(dados_quebra))
dados_macro
dados_macro |> head(10)
'criar expansão de dados com uma nova coluna P expandindo por groupby cada elemento por linha de P1 P2 P3 P4 removendo P1 P2 P3 P4'
dados_macro |> head(10)
dados_expandidos <- dados_macro %>%
pivot_longer(cols = starts_with("P"), names_to = "P_type", values_to = "P") %>%
select(-P_type) %>%
group_by(COMP, PLAYER, DATA) %>%
mutate(row_id = row_number()) %>%
ungroup()
dados_expandidos <- dados_macro %>%
pivot_longer(cols = starts_with("P1|P2|P3|P4"), names_to = "P_type", values_to = "P") %>%
select(-P_type) %>%
group_by(COMP, PLAYER, DATA) %>%
mutate(row_id = row_number()) %>%
ungroup()
dados_macro %>%
pivot_longer(cols = starts_with("P"), names_to = "P_type", values_to = "P") %>%
select(-P_type) %>%
dados_expandidos <- dados_macro %>%
pivot_longer(cols = starts_with("P"), names_to = "P_type", values_to = "P") %>%
select(-P_type) %>%
group_by(COMP, PLAYER, DATA) %>%
mutate(row_id = row_number()) %>%
ungroup()
dados_macro %>%
pivot_longer(cols = starts_with("P"), names_to = "P_type", values_to = "P") %>%
select(-P_type)
dados_macro <- dados_macro %>%
rename(PLAYER = JOGADOR)  # Substitua `PLAYER` pelo nome correto, se necessário
dados_macro <- dados_macro %>%
rename(PLAYER = 'JOGADOR')  # Substitua `PLAYER` pelo nome correto, se necessário
colnames(dados_macro)
colnames(dados_macro)[2] = 'JOGADOR'
dados_macro %>%
pivot_longer(cols = starts_with("P"), names_to = "P_type", values_to = "P") %>%
select(-P_type)
dados_expandidos <- dados_macro %>%
pivot_longer(cols = starts_with("P"), names_to = "P_type", values_to = "P") %>%
select(-P_type) %>%
group_by(COMP, PLAYER, DATA) %>%
mutate(row_id = row_number()) %>%
ungroup()
dados_expandidos <- dados_macro %>%
pivot_longer(cols = starts_with("P"), names_to = "P_type", values_to = "P") %>%
select(-P_type) %>%
group_by(COMP, JOGADOR, DATA) %>%
mutate(row_id = row_number()) %>%
ungroup()
dados_expandidos
dados_expandidos <- dados_macro %>%
pivot_longer(cols = starts_with("P"), names_to = "P_type", values_to = "P") %>%
select(-P_type) %>%
group_by(COMP, JOGADOR, DATA) %>%
ungroup()
colnames(dados_expandidos)[2] = 'PLAYER'
dados_expandidos
dados_macro |> head(10)
dados |> filter(JOGADOR != 'MTSEXY') |> group_by(DATA) |> mutate(COMP_P1 = paste0(P1,P2,P3,P4))
dados_macro |> filter(JOGADOR != 'MTSEXY') |> group_by(DATA) |> mutate(COMP_P1 = paste0(P1,P2,P3,P4))
dados_macro |> filter(JOGADOR != 'MTSEXY') |> group_by(DATA) |> mutate(COMP_P1 = paste0(P1,P2,P3,P4,collapse = '_'))
dados_macro |> filter(JOGADOR != 'MTSEXY') |> group_by(DATA) |> mutate(COMP_P1 = paste0(P1,collapse = '_'))
dados_macro |> filter(JOGADOR != 'MTSEXY') |> group_by(DATA) |> mutate(COMP_P1 = paste0(P1,collapse = '_'))
dados_macro |> filter(JOGADOR != 'MTSEXY') |> group_by(DATA) |> summarise(COMP_P1 = paste0(P1,collapse = '_'))
dados_macro |> filter(JOGADOR != 'MTSEXY') |> group_by(DATA) |> summarise(COMP_P1 = paste0(P1,collapse = '_'))
dados_expandidos
write.table(dados_expandidos, file = paste0("HABILIDADES_EXPANDIDO",".csv"), sep = ";", na = "null", quote = TRUE, row.names = FALSE,fileEncoding = "latin1",dec = ".")
dados_macro |> filter(JOGADOR != 'MTSEXY') |> group_by(DATA) |> summarise(COMP_P1 = paste0(P1,collapse = '_'))
write.table(dados_macro |> filter(JOGADOR != 'MTSEXY') |> group_by(DATA) |> summarise(COMP_P1 = paste0(P1,collapse = '_')), file = paste0("COMP_HABILIDADES_ATIVAS",".csv"), sep = ";", na = "null", quote = TRUE, row.names = FALSE,fileEncoding = "latin1",dec = ".")
dados_macro
dados_macro |> head()
'quero que transforme os elementos P1 P2 P3 P4 em colunas de modo que a partir deles os valores dentro das colunas seja a contagem de vezes que aparecem neles todos, preserveando apenas a DATA como id e preencha com NA os elementos com nenhuma contagem'
dados_macro |> head()
dados_macro %>%
pivot_longer(cols = starts_with("P"), names_to = "P", values_to = "valor") %>%
group_by(DATA, valor) %>%
summarise(contagem = n(), .groups = 'drop') %>%
pivot_wider(names_from = valor, values_from = contagem, values_fill = list(contagem = NA))
dados_macro |> filter(JOGADOR != 'MTSEXY') |>
pivot_longer(cols = starts_with("P"), names_to = "P", values_to = "valor") %>%
group_by(DATA, valor) %>%
summarise(contagem = n(), .groups = 'drop') %>%
pivot_wider(names_from = valor, values_from = contagem, values_fill = list(contagem = NA))
dados_macro |> filter(JOGADOR != 'MTSEXY') |>
pivot_longer(cols = starts_with("P"), names_to = "P", values_to = "valor") %>%
group_by(DATA, valor) %>%
summarise(contagem = n(), .groups = 'drop') %>%
pivot_wider(names_from = valor, values_from = contagem, values_fill = list(contagem = 0))
write.table(dados_macro |> filter(JOGADOR != 'MTSEXY') |>
pivot_longer(cols = starts_with("P"), names_to = "P", values_to = "valor") %>%
group_by(DATA, valor) %>%
summarise(contagem = n(), .groups = 'drop') %>%
pivot_wider(names_from = valor, values_from = contagem, values_fill = list(contagem = 0)), file = paste0("COMP_HABILIDADES_DUMMIES",".csv"), sep = ";", na = "null", quote = TRUE, row.names = FALSE,fileEncoding = "latin1",dec = ".")
